! Copyright (c) 2018 Matthew J. Smith and Overkit contributors
! License: MIT (http://opensource.org/licenses/MIT)

module BoundingBoxTest

  use pFUnit_mod
  use Overkit
  use ovsGlobal
  implicit none

  @TestCase
  type, extends(TestCase) :: t_bounding_box_test
  end type t_bounding_box_test

contains

  @Test
  subroutine DefaultInitialize(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox

    BBox = ovk_bbox_()

    @AssertEqual(2, BBox%nd)
    @AssertEqual([0._rk, 0._rk, 0._rk], BBox%b)
    @AssertEqual([-1._rk, -1._rk, 0._rk], BBox%e)

  end subroutine DefaultInitialize

  @Test
  subroutine Create(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox

    ! Empty
    BBox = ovk_bbox_(2)

    @AssertEqual(2, BBox%nd)
    @AssertEqual([0._rk, 0._rk, 0._rk], BBox%b)
    @AssertEqual([-1._rk, -1._rk, 0._rk], BBox%e)

    ! Empty
    BBox = ovk_bbox_(3)

    @AssertEqual(3, BBox%nd)
    @AssertEqual([0._rk, 0._rk, 0._rk], BBox%b)
    @AssertEqual([-1._rk, -1._rk, -1._rk], BBox%e)

    ! Not empty
    BBox = ovk_bbox_(2, [2._rk, 4._rk], [3._rk, 5._rk])

    @AssertEqual(2, BBox%nd)
    @AssertEqual([2._rk, 4._rk, 0._rk], BBox%b)
    @AssertEqual([3._rk, 5._rk, 0._rk], BBox%e)

    ! Not empty
    BBox = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [3._rk, 5._rk, 7._rk])

    @AssertEqual(3, BBox%nd)
    @AssertEqual([2._rk, 4._rk, 6._rk], BBox%b)
    @AssertEqual([3._rk, 5._rk, 7._rk], BBox%e)

  end subroutine Create

  @Test
  subroutine Equality(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox1, BBox2

    BBox1 = ovk_bbox_(2, [2._rk, 4._rk], [3._rk, 5._rk])

    ! Self
    @AssertTrue(BBox1 == BBox1)

    ! Other with same values
    BBox2 = BBox1
    @AssertTrue(BBox1 == BBox2)

    ! Different dimension
    BBox2 = ovk_bbox_(3, [2._rk, 4._rk, 0._rk], [3._rk, 5._rk, 0._rk])
    @AssertTrue(BBox1 /= BBox2)

    ! Different begin
    BBox2 = ovk_bbox_(2, [2._rk, 5._rk], [3._rk, 5._rk])
    @AssertTrue(BBox1 /= BBox2)

    ! Different end
    BBox2 = ovk_bbox_(2, [2._rk, 4._rk], [4._rk, 5._rk])
    @AssertTrue(BBox1 /= BBox2)

  end subroutine Equality

  @Test
  subroutine Overlaps2D(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox1, BBox2, BBox3

    BBox1 = ovk_bbox_(2, [2._rk, 4._rk], [3._rk, 5._rk])

    ! Self
    BBox2 = BBox1
    @AssertTrue(ovkBBOverlaps(BBox1, BBox2))

    ! Smaller
    BBox2 = ovk_bbox_(2, [2.25_rk, 4.25_rk], [2.75_rk, 4.75_rk])
    @AssertTrue(ovkBBOverlaps(BBox1, BBox2))

    ! Shifted left in x
    BBox2 = ovk_bbox_(2, [1.5_rk, 4._rk], [2.5_rk, 5._rk])
    @AssertTrue(ovkBBOverlaps(BBox1, BBox2))

    ! Shifted right in x
    BBox2 = ovk_bbox_(2, [2.5_rk, 4._rk], [3.5_rk, 5._rk])
    @AssertTrue(ovkBBOverlaps(BBox1, BBox2))

    ! Shifted left in y
    BBox2 = ovk_bbox_(2, [2._rk, 3.5_rk], [3._rk, 4.5_rk])
    @AssertTrue(ovkBBOverlaps(BBox1, BBox2))

    ! Shifted right in y
    BBox2 = ovk_bbox_(2, [2._rk, 4.5_rk], [3._rk, 5.5_rk])
    @AssertTrue(ovkBBOverlaps(BBox1, BBox2))

    ! Larger
    BBox2 = ovk_bbox_(2, [1.5_rk, 3.5_rk], [3.5_rk, 5.5_rk])
    @AssertTrue(ovkBBOverlaps(BBox1, BBox2))

    ! Non-overlapping
    BBox2 = ovk_bbox_(2, [4._rk, 6._rk], [5._rk, 7._rk])
    @AssertFalse(ovkBBOverlaps(BBox1, BBox2))

    ! Left empty
    BBox2 = ovk_bbox_(2, [3._rk, 5._rk], [2._rk, 4._rk])
    BBox3 = ovk_bbox_(2, [1._rk, 3._rk], [4._rk, 6._rk])
    @AssertFalse(ovkBBOverlaps(BBox2, BBox3))

    ! Right empty
    BBox2 = ovk_bbox_(2, [1._rk, 3._rk], [4._rk, 6._rk])
    BBox3 = ovk_bbox_(2, [3._rk, 5._rk], [2._rk, 4._rk])
    @AssertFalse(ovkBBOverlaps(BBox2, BBox3))

  end subroutine Overlaps2D

  @Test
  subroutine Overlaps3D(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox1, BBox2, BBox3

    BBox1 = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [3._rk, 5._rk, 7._rk])

    ! Self
    BBox2 = BBox1
    @AssertTrue(ovkBBOverlaps(BBox1, BBox2))

    ! Smaller
    BBox2 = ovk_bbox_(3, [2.25_rk, 4.25_rk, 6.25_rk], [2.75_rk, 4.75_rk, 6.75_rk])
    @AssertTrue(ovkBBOverlaps(BBox1, BBox2))

    ! Shifted left in x
    BBox2 = ovk_bbox_(3, [1.5_rk, 4._rk, 6._rk], [2.5_rk, 5._rk, 7._rk])
    @AssertTrue(ovkBBOverlaps(BBox1, BBox2))

    ! Shifted right in x
    BBox2 = ovk_bbox_(3, [2.5_rk, 4._rk, 6._rk], [3.5_rk, 5._rk, 7._rk])
    @AssertTrue(ovkBBOverlaps(BBox1, BBox2))

    ! Shifted left in y
    BBox2 = ovk_bbox_(3, [2._rk, 3.5_rk, 6._rk], [3._rk, 4.5_rk, 7._rk])
    @AssertTrue(ovkBBOverlaps(BBox1, BBox2))

    ! Shifted right in y
    BBox2 = ovk_bbox_(3, [2._rk, 4.5_rk, 6._rk], [3._rk, 5.5_rk, 7._rk])
    @AssertTrue(ovkBBOverlaps(BBox1, BBox2))

    ! Shifted left in z
    BBox2 = ovk_bbox_(3, [2._rk, 4._rk, 5.5_rk], [3._rk, 5._rk, 6.5_rk])
    @AssertTrue(ovkBBOverlaps(BBox1, BBox2))

    ! Shifted right in z
    BBox2 = ovk_bbox_(3, [2._rk, 4._rk, 6.5_rk], [3._rk, 5._rk, 7.5_rk])
    @AssertTrue(ovkBBOverlaps(BBox1, BBox2))

    ! Larger
    BBox2 = ovk_bbox_(3, [1.5_rk, 3.5_rk, 5.5_rk], [3.5_rk, 5.5_rk, 7.5_rk])
    @AssertTrue(ovkBBOverlaps(BBox1, BBox2))

    ! Non-overlapping
    BBox2 = ovk_bbox_(3, [4._rk, 6._rk, 8._rk], [5._rk, 7._rk, 9._rk])
    @AssertFalse(ovkBBOverlaps(BBox1, BBox2))

    ! Left empty
    BBox2 = ovk_bbox_(3, [3._rk, 5._rk, 7._rk], [2._rk, 4._rk, 6._rk])
    BBox3 = ovk_bbox_(3, [1._rk, 3._rk, 5._rk], [4._rk, 6._rk, 8._rk])
    @AssertFalse(ovkBBOverlaps(BBox2, BBox3))

    ! Right empty
    BBox2 = ovk_bbox_(3, [1._rk, 3._rk, 5._rk], [4._rk, 6._rk, 8._rk])
    BBox3 = ovk_bbox_(3, [3._rk, 5._rk, 7._rk], [2._rk, 4._rk, 6._rk])
    @AssertFalse(ovkBBOverlaps(BBox2, BBox3))

  end subroutine Overlaps3D

  @Test
  subroutine Contains2D(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox1, BBox2, BBox3

    BBox1 = ovk_bbox_(2, [2._rk, 4._rk], [3._rk, 5._rk])

    ! Self
    BBox2 = BBox1
    @AssertTrue(ovkBBContains(BBox1, BBox2))

    ! Smaller
    BBox2 = ovk_bbox_(2, [2.25_rk, 4.25_rk], [2.75_rk, 4.75_rk])
    @AssertTrue(ovkBBContains(BBox1, BBox2))

    ! Shifted left in x
    BBox2 = ovk_bbox_(2, [1.5_rk, 4._rk], [2.5_rk, 5._rk])
    @AssertFalse(ovkBBContains(BBox1, BBox2))

    ! Shifted right in x
    BBox2 = ovk_bbox_(2, [2.5_rk, 4._rk], [3.5_rk, 5._rk])
    @AssertFalse(ovkBBContains(BBox1, BBox2))

    ! Shifted left in y
    BBox2 = ovk_bbox_(2, [2._rk, 3.5_rk], [3._rk, 4.5_rk])
    @AssertFalse(ovkBBContains(BBox1, BBox2))

    ! Shifted right in y
    BBox2 = ovk_bbox_(2, [2._rk, 4.5_rk], [3._rk, 5.5_rk])
    @AssertFalse(ovkBBContains(BBox1, BBox2))

    ! Larger
    BBox2 = ovk_bbox_(2, [1.5_rk, 3.5_rk], [3.5_rk, 5.5_rk])
    @AssertFalse(ovkBBContains(BBox1, BBox2))

    ! Left empty
    BBox2 = ovk_bbox_(2, [3._rk, 5._rk], [2._rk, 4._rk])
    BBox3 = ovk_bbox_(2, [4._rk, 6._rk], [1._rk, 3._rk])
    @AssertFalse(ovkBBContains(BBox2, BBox3))

    ! Right empty
    BBox2 = ovk_bbox_(2, [2._rk, 4._rk], [3._rk, 5._rk])
    BBox3 = ovk_bbox_(2, [4._rk, 6._rk], [1._rk, 3._rk])
    @AssertFalse(ovkBBContains(BBox2, BBox3))

  end subroutine Contains2D

  @Test
  subroutine Contains3D(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox1, BBox2, BBox3

    BBox1 = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [3._rk, 5._rk, 7._rk])

    ! Self
    BBox2 = BBox1
    @AssertTrue(ovkBBContains(BBox1, BBox2))

    ! Smaller
    BBox2 = ovk_bbox_(3, [2.25_rk, 4.25_rk, 6.25_rk], [2.75_rk, 4.75_rk, 6.75_rk])
    @AssertTrue(ovkBBContains(BBox1, BBox2))

    ! Shifted left in x
    BBox2 = ovk_bbox_(3, [1.5_rk, 4._rk, 6._rk], [2.5_rk, 5._rk, 7._rk])
    @AssertFalse(ovkBBContains(BBox1, BBox2))

    ! Shifted right in x
    BBox2 = ovk_bbox_(3, [2.5_rk, 4._rk, 6._rk], [3.5_rk, 5._rk, 7._rk])
    @AssertFalse(ovkBBContains(BBox1, BBox2))

    ! Shifted left in y
    BBox2 = ovk_bbox_(3, [2._rk, 3.5_rk, 6._rk], [3._rk, 4.5_rk, 7._rk])
    @AssertFalse(ovkBBContains(BBox1, BBox2))

    ! Shifted right in y
    BBox2 = ovk_bbox_(3, [2._rk, 4.5_rk, 6._rk], [3._rk, 5.5_rk, 7._rk])
    @AssertFalse(ovkBBContains(BBox1, BBox2))

    ! Shifted left in z
    BBox2 = ovk_bbox_(3, [2._rk, 4._rk, 5.5_rk], [3._rk, 5._rk, 6.5_rk])
    @AssertFalse(ovkBBContains(BBox1, BBox2))

    ! Shifted right in z
    BBox2 = ovk_bbox_(3, [2._rk, 4._rk, 6.5_rk], [3._rk, 5._rk, 7.5_rk])
    @AssertFalse(ovkBBContains(BBox1, BBox2))

    ! Larger
    BBox2 = ovk_bbox_(3, [1.5_rk, 3.5_rk, 5.5_rk], [3.5_rk, 5.5_rk, 7.5_rk])
    @AssertFalse(ovkBBContains(BBox1, BBox2))

    ! Left empty
    BBox2 = ovk_bbox_(3, [3._rk, 5._rk, 7._rk], [2._rk, 4._rk, 6._rk])
    BBox3 = ovk_bbox_(3, [4._rk, 6._rk, 8._rk], [1._rk, 3._rk, 5._rk])
    @AssertFalse(ovkBBContains(BBox2, BBox3))

    ! Right empty
    BBox2 = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [3._rk, 5._rk, 7._rk])
    BBox3 = ovk_bbox_(3, [4._rk, 6._rk, 8._rk], [1._rk, 3._rk, 5._rk])
    @AssertFalse(ovkBBContains(BBox2, BBox3))

  end subroutine Contains3D

  @Test
  subroutine ContainsPoint2D(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox

    BBox = ovk_bbox_(2, [2._rk, 4._rk], [3._rk, 5._rk])

    ! Inside
    @AssertTrue(ovkBBContainsPoint(BBox, [2.5_rk, 4.5_rk]))

    ! On edge
    @AssertTrue(ovkBBContainsPoint(BBox, [2._rk, 4._rk]))
    @AssertTrue(ovkBBContainsPoint(BBox, [3._rk, 4._rk]))
    @AssertTrue(ovkBBContainsPoint(BBox, [2._rk, 5._rk]))
    @AssertTrue(ovkBBContainsPoint(BBox, [3._rk, 5._rk]))

    ! Outside
    @AssertFalse(ovkBBContainsPoint(BBox, [1.5_rk, 4.5_rk]))
    @AssertFalse(ovkBBContainsPoint(BBox, [3.5_rk, 4.5_rk]))
    @AssertFalse(ovkBBContainsPoint(BBox, [2.5_rk, 3.5_rk]))
    @AssertFalse(ovkBBContainsPoint(BBox, [2.5_rk, 5.5_rk]))

    ! Empty interval
    BBox = ovk_bbox_(2, [3._rk, 5._rk], [2._rk, 4._rk])
    @AssertFalse(ovkBBContainsPoint(BBox, [2.5_rk, 4.5_rk]))

  end subroutine ContainsPoint2D

  @Test
  subroutine ContainsPoint3D(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox

    BBox = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [3._rk, 5._rk, 7._rk])

    ! Inside
    @AssertTrue(ovkBBContainsPoint(BBox, [2.5_rk, 4.5_rk, 6.5_rk]))

    ! On edge
    @AssertTrue(ovkBBContainsPoint(BBox, [2._rk, 4._rk, 6._rk]))
    @AssertTrue(ovkBBContainsPoint(BBox, [3._rk, 4._rk, 6._rk]))
    @AssertTrue(ovkBBContainsPoint(BBox, [2._rk, 5._rk, 6._rk]))
    @AssertTrue(ovkBBContainsPoint(BBox, [3._rk, 5._rk, 6._rk]))
    @AssertTrue(ovkBBContainsPoint(BBox, [2._rk, 4._rk, 7._rk]))
    @AssertTrue(ovkBBContainsPoint(BBox, [3._rk, 4._rk, 7._rk]))
    @AssertTrue(ovkBBContainsPoint(BBox, [2._rk, 5._rk, 7._rk]))
    @AssertTrue(ovkBBContainsPoint(BBox, [3._rk, 5._rk, 7._rk]))

    ! Outside
    @AssertFalse(ovkBBContainsPoint(BBox, [1.5_rk, 4.5_rk, 6.5_rk]))
    @AssertFalse(ovkBBContainsPoint(BBox, [3.5_rk, 4.5_rk, 6.5_rk]))
    @AssertFalse(ovkBBContainsPoint(BBox, [2.5_rk, 3.5_rk, 6.5_rk]))
    @AssertFalse(ovkBBContainsPoint(BBox, [2.5_rk, 5.5_rk, 6.5_rk]))
    @AssertFalse(ovkBBContainsPoint(BBox, [2.5_rk, 4.5_rk, 5.5_rk]))
    @AssertFalse(ovkBBContainsPoint(BBox, [2.5_rk, 4.5_rk, 7.5_rk]))

    ! Empty interval
    BBox = ovk_bbox_(3, [3._rk, 5._rk, 7._rk], [2._rk, 4._rk, 6._rk])
    @AssertFalse(ovkBBContainsPoint(BBox, [2.5_rk, 4.5_rk, 6.5_rk]))

  end subroutine ContainsPoint3D

  @Test
  subroutine Empty2D(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox

    ! Interval
    BBox = ovk_bbox_(2, [2._rk, 4._rk], [3._rk, 5._rk])
    @AssertFalse(ovkBBIsEmpty(BBox))

    ! Edge x
    BBox = ovk_bbox_(2, [2._rk, 4._rk], [3._rk, 4._rk])
    @AssertFalse(ovkBBIsEmpty(BBox))

    ! Edge y
    BBox = ovk_bbox_(2, [2._rk, 4._rk], [2._rk, 5._rk])
    @AssertFalse(ovkBBIsEmpty(BBox))

    ! Point
    BBox = ovk_bbox_(2, [2._rk, 4._rk], [2._rk, 4._rk])
    @AssertFalse(ovkBBIsEmpty(BBox))

    ! Empty
    BBox = ovk_bbox_(2, [2._rk, 4._rk], [1._rk, 3._rk])
    @AssertTrue(ovkBBIsEmpty(BBox))

  end subroutine Empty2D

  @Test
  subroutine Empty3D(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox

    ! Interval
    BBox = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [3._rk, 5._rk, 7._rk])
    @AssertFalse(ovkBBIsEmpty(BBox))

    ! Face x
    BBox = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [2._rk, 5._rk, 7._rk])
    @AssertFalse(ovkBBIsEmpty(BBox))

    ! Face y
    BBox = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [3._rk, 4._rk, 7._rk])
    @AssertFalse(ovkBBIsEmpty(BBox))

    ! Face z
    BBox = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [3._rk, 5._rk, 6._rk])
    @AssertFalse(ovkBBIsEmpty(BBox))

    ! Edge x
    BBox = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [3._rk, 4._rk, 6._rk])
    @AssertFalse(ovkBBIsEmpty(BBox))

    ! Edge y
    BBox = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [2._rk, 5._rk, 6._rk])
    @AssertFalse(ovkBBIsEmpty(BBox))

    ! Edge z
    BBox = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [2._rk, 4._rk, 7._rk])
    @AssertFalse(ovkBBIsEmpty(BBox))

    ! Point
    BBox = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [2._rk, 4._rk, 6._rk])
    @AssertFalse(ovkBBIsEmpty(BBox))

    ! Empty
    BBox = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [1._rk, 3._rk, 5._rk])
    @AssertTrue(ovkBBIsEmpty(BBox))

  end subroutine Empty3D

  @Test
  subroutine Size2D(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox

    ! Interval
    BBox = ovk_bbox_(2, [2._rk, 4._rk], [3._rk, 5._rk])
    @AssertEqual([1._rk, 1._rk], ovkBBSize(BBox))

    ! Edge x
    BBox = ovk_bbox_(2, [2._rk, 4._rk], [3._rk, 4._rk])
    @AssertEqual([1._rk, 0._rk], ovkBBSize(BBox))

    ! Edge y
    BBox = ovk_bbox_(2, [2._rk, 4._rk], [2._rk, 5._rk])
    @AssertEqual([0._rk, 1._rk], ovkBBSize(BBox))

    ! Point
    BBox = ovk_bbox_(2, [2._rk, 4._rk], [2._rk, 4._rk])
    @AssertEqual([0._rk, 0._rk], ovkBBSize(BBox))

    ! Empty
    BBox = ovk_bbox_(2, [2._rk, 4._rk], [1._rk, 3._rk])
    @AssertEqual([0._rk, 0._rk], ovkBBSize(BBox))

  end subroutine Size2D

  @Test
  subroutine Size3D(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox

    ! Interval
    BBox = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [3._rk, 5._rk, 7._rk])
    @AssertEqual([1._rk, 1._rk, 1._rk], ovkBBSize(BBox))

    ! Face x
    BBox = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [2._rk, 5._rk, 7._rk])
    @AssertEqual([0._rk, 1._rk, 1._rk], ovkBBSize(BBox))

    ! Face y
    BBox = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [3._rk, 4._rk, 7._rk])
    @AssertEqual([1._rk, 0._rk, 1._rk], ovkBBSize(BBox))

    ! Face z
    BBox = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [3._rk, 5._rk, 6._rk])
    @AssertEqual([1._rk, 1._rk, 0._rk], ovkBBSize(BBox))

    ! Edge x
    BBox = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [3._rk, 4._rk, 6._rk])
    @AssertEqual([1._rk, 0._rk, 0._rk], ovkBBSize(BBox))

    ! Edge y
    BBox = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [2._rk, 5._rk, 6._rk])
    @AssertEqual([0._rk, 1._rk, 0._rk], ovkBBSize(BBox))

    ! Edge z
    BBox = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [2._rk, 4._rk, 7._rk])
    @AssertEqual([0._rk, 0._rk, 1._rk], ovkBBSize(BBox))

    ! Point
    BBox = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [2._rk, 4._rk, 6._rk])
    @AssertEqual([0._rk, 0._rk, 0._rk], ovkBBSize(BBox))

    ! Empty
    BBox = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [1._rk, 3._rk, 5._rk])
    @AssertEqual([0._rk, 0._rk, 0._rk], ovkBBSize(BBox))

  end subroutine Size3D

  @Test
  subroutine Move2D(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox1, BBox2

    BBox1 = ovk_bbox_(2, [2._rk, 4._rk], [3._rk, 5._rk])

    ! Zero
    BBox2 = ovkBBMove(BBox1, [0._rk, 0._rk])
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 0._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 0._rk], BBox2%e)

    ! Positive x
    BBox2 = ovkBBMove(BBox1, [0.5_rk, 0._rk])
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2.5_rk, 4._rk, 0._rk], BBox2%b)
    @AssertEqual([3.5_rk, 5._rk, 0._rk], BBox2%e)

    ! Negative x
    BBox2 = ovkBBMove(BBox1, [-0.5_rk, 0._rk])
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([1.5_rk, 4._rk, 0._rk], BBox2%b)
    @AssertEqual([2.5_rk, 5._rk, 0._rk], BBox2%e)

    ! Positive y
    BBox2 = ovkBBMove(BBox1, [0._rk, 0.5_rk])
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2._rk, 4.5_rk, 0._rk], BBox2%b)
    @AssertEqual([3._rk, 5.5_rk, 0._rk], BBox2%e)

    ! Negative y
    BBox2 = ovkBBMove(BBox1, [0._rk, -0.5_rk])
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2._rk, 3.5_rk, 0._rk], BBox2%b)
    @AssertEqual([3._rk, 4.5_rk, 0._rk], BBox2%e)

    ! All
    BBox2 = ovkBBMove(BBox1, [0.5_rk, -0.5_rk])
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2.5_rk, 3.5_rk, 0._rk], BBox2%b)
    @AssertEqual([3.5_rk, 4.5_rk, 0._rk], BBox2%e)

  end subroutine Move2D

  @Test
  subroutine Move3D(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox1, BBox2

    BBox1 = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [3._rk, 5._rk, 7._rk])

    ! Zero
    BBox2 = ovkBBMove(BBox1, [0._rk, 0._rk, 0._rk])
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 6._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 7._rk], BBox2%e)

    ! Positive x
    BBox2 = ovkBBMove(BBox1, [0.5_rk, 0._rk, 0._rk])
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2.5_rk, 4._rk, 6._rk], BBox2%b)
    @AssertEqual([3.5_rk, 5._rk, 7._rk], BBox2%e)

    ! Negative x
    BBox2 = ovkBBMove(BBox1, [-0.5_rk, 0._rk, 0._rk])
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([1.5_rk, 4._rk, 6._rk], BBox2%b)
    @AssertEqual([2.5_rk, 5._rk, 7._rk], BBox2%e)

    ! Positive y
    BBox2 = ovkBBMove(BBox1, [0._rk, 0.5_rk, 0._rk])
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 4.5_rk, 6._rk], BBox2%b)
    @AssertEqual([3._rk, 5.5_rk, 7._rk], BBox2%e)

    ! Negative y
    BBox2 = ovkBBMove(BBox1, [0._rk, -0.5_rk, 0._rk])
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 3.5_rk, 6._rk], BBox2%b)
    @AssertEqual([3._rk, 4.5_rk, 7._rk], BBox2%e)

    ! Positive z
    BBox2 = ovkBBMove(BBox1, [0._rk, 0._rk, 0.5_rk])
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 6.5_rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 7.5_rk], BBox2%e)

    ! Negative z
    BBox2 = ovkBBMove(BBox1, [0._rk, 0._rk, -0.5_rk])
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 5.5_rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 6.5_rk], BBox2%e)

    ! All
    BBox2 = ovkBBMove(BBox1, [0.5_rk, -0.5_rk, 0.5_rk])
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2.5_rk, 3.5_rk, 6.5_rk], BBox2%b)
    @AssertEqual([3.5_rk, 4.5_rk, 7.5_rk], BBox2%e)

  end subroutine Move3D

  @Test
  subroutine Grow2D(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox1, BBox2

    BBox1 = ovk_bbox_(2, [2._rk, 4._rk], [3._rk, 5._rk])

    ! Zero
    BBox2 = ovkBBGrow(BBox1, 0._rk)
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 0._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 0._rk], BBox2%e)

    ! Positive
    BBox2 = ovkBBGrow(BBox1, 0.5_rk)
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([1.5_rk, 3.5_rk, 0._rk], BBox2%b)
    @AssertEqual([3.5_rk, 5.5_rk, 0._rk], BBox2%e)

    ! Negative
    BBox2 = ovkBBGrow(BBox1, -0.5_rk)
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2.5_rk, 4.5_rk, 0._rk], BBox2%b)
    @AssertEqual([2.5_rk, 4.5_rk, 0._rk], BBox2%e)

  end subroutine Grow2D

  @Test
  subroutine Grow3D(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox1, BBox2

    BBox1 = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [3._rk, 5._rk, 7._rk])

    ! Zero
    BBox2 = ovkBBGrow(BBox1, 0._rk)
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 6._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 7._rk], BBox2%e)

    ! Positive
    BBox2 = ovkBBGrow(BBox1, 0.5_rk)
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([1.5_rk, 3.5_rk, 5.5_rk], BBox2%b)
    @AssertEqual([3.5_rk, 5.5_rk, 7.5_rk], BBox2%e)

    ! Negative
    BBox2 = ovkBBGrow(BBox1, -0.5_rk)
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2.5_rk, 4.5_rk, 6.5_rk], BBox2%b)
    @AssertEqual([2.5_rk, 4.5_rk, 6.5_rk], BBox2%e)

  end subroutine Grow3D

  @Test
  subroutine Scale2D(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox1, BBox2

    BBox1 = ovk_bbox_(2, [2._rk, 4._rk], [3._rk, 5._rk])

    ! One
    BBox2 = ovkBBScale(BBox1, 1._rk)
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 0._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 0._rk], BBox2%e)

    ! Zero
    BBox2 = ovkBBScale(BBox1, 0._rk)
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2.5_rk, 4.5_rk, 0._rk], BBox2%b)
    @AssertEqual([2.5_rk, 4.5_rk, 0._rk], BBox2%e)

    ! Greater than one
    BBox2 = ovkBBScale(BBox1, 2._rk)
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([1.5_rk, 3.5_rk, 0._rk], BBox2%b)
    @AssertEqual([3.5_rk, 5.5_rk, 0._rk], BBox2%e)

    ! Less than one
    BBox2 = ovkBBScale(BBox1, 0.5_rk)
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2.25_rk, 4.25_rk, 0._rk], BBox2%b)
    @AssertEqual([2.75_rk, 4.75_rk, 0._rk], BBox2%e)

  end subroutine Scale2D

  @Test
  subroutine Scale3D(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox1, BBox2

    BBox1 = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [3._rk, 5._rk, 7._rk])

    ! One
    BBox2 = ovkBBScale(BBox1, 1._rk)
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 6._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 7._rk], BBox2%e)

    ! Zero
    BBox2 = ovkBBScale(BBox1, 0._rk)
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2.5_rk, 4.5_rk, 6.5_rk], BBox2%b)
    @AssertEqual([2.5_rk, 4.5_rk, 6.5_rk], BBox2%e)

    ! Greater than one
    BBox2 = ovkBBScale(BBox1, 2._rk)
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([1.5_rk, 3.5_rk, 5.5_rk], BBox2%b)
    @AssertEqual([3.5_rk, 5.5_rk, 7.5_rk], BBox2%e)

    ! Less than one
    BBox2 = ovkBBScale(BBox1, 0.5_rk)
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2.25_rk, 4.25_rk, 6.25_rk], BBox2%b)
    @AssertEqual([2.75_rk, 4.75_rk, 6.75_rk], BBox2%e)

  end subroutine Scale3D

  @Test
  subroutine Extend2D(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox1, BBox2

    BBox1 = ovk_bbox_(2, [2._rk, 4._rk], [3._rk, 5._rk])

    ! Contained
    BBox2 = ovkBBExtend(BBox1, [2.5_rk, 4.5_rk])
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 0._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 0._rk], BBox2%e)

    ! Outside lower
    BBox2 = ovkBBExtend(BBox1, [1.5_rk, 3.5_rk])
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([1.5_rk, 3.5_rk, 0._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 0._rk], BBox2%e)

    ! Outside upper
    BBox2 = ovkBBExtend(BBox1, [3.5_rk, 5.5_rk])
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 0._rk], BBox2%b)
    @AssertEqual([3.5_rk, 5.5_rk, 0._rk], BBox2%e)

  end subroutine Extend2D

  @Test
  subroutine Extend3D(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox1, BBox2

    BBox1 = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [3._rk, 5._rk, 7._rk])

    ! Contained
    BBox2 = ovkBBExtend(BBox1, [2.5_rk, 4.5_rk, 6.5_rk])
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 6._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 7._rk], BBox2%e)

    ! Outside lower
    BBox2 = ovkBBExtend(BBox1, [1.5_rk, 3.5_rk, 5.5_rk])
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([1.5_rk, 3.5_rk, 5.5_rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 7._rk], BBox2%e)

    ! Outside upper
    BBox2 = ovkBBExtend(BBox1, [3.5_rk, 5.5_rk, 7.5_rk])
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 6._rk], BBox2%b)
    @AssertEqual([3.5_rk, 5.5_rk, 7.5_rk], BBox2%e)

  end subroutine Extend3D

  @Test
  subroutine Union2D(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox1, BBox2

    BBox1 = ovk_bbox_(2, [2._rk, 4._rk], [3._rk, 5._rk])

    ! Self
    BBox2 = ovkBBUnion(BBox1, BBox1)
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 0._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 0._rk], BBox2%e)

    ! Empty left
    BBox2 = ovkBBUnion(ovk_bbox_(2), BBox1)
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 0._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 0._rk], BBox2%e)

    ! Empty right
    BBox2 = ovkBBUnion(BBox1, ovk_bbox_(2))
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 0._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 0._rk], BBox2%e)

    ! Smaller
    BBox2 = ovkBBUnion(BBox1, ovk_bbox_(2, [2.25_rk, 4.25_rk], [2.75_rk, 4.75_rk]))
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 0._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 0._rk], BBox2%e)

    ! Shifted left in x
    BBox2 = ovkBBUnion(BBox1, ovk_bbox_(2, [1.5_rk, 4._rk], [2.5_rk, 5._rk]))
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([1.5_rk, 4._rk, 0._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 0._rk], BBox2%e)

    ! Shifted right in x
    BBox2 = ovkBBUnion(BBox1, ovk_bbox_(2, [2.5_rk, 4._rk], [3.5_rk, 5._rk]))
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 0._rk], BBox2%b)
    @AssertEqual([3.5_rk, 5._rk, 0._rk], BBox2%e)

    ! Shifted left in y
    BBox2 = ovkBBUnion(BBox1, ovk_bbox_(2, [2._rk, 3.5_rk], [3._rk, 4.5_rk]))
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2._rk, 3.5_rk, 0._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 0._rk], BBox2%e)

    ! Shifted right in y
    BBox2 = ovkBBUnion(BBox1, ovk_bbox_(2, [2._rk, 4.5_rk], [3._rk, 5.5_rk]))
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 0._rk], BBox2%b)
    @AssertEqual([3._rk, 5.5_rk, 0._rk], BBox2%e)

    ! Larger
    BBox2 = ovkBBUnion(BBox1, ovk_bbox_(2, [1.5_rk, 3.5_rk], [3.5_rk, 5.5_rk]))
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([1.5_rk, 3.5_rk, 0._rk], BBox2%b)
    @AssertEqual([3.5_rk, 5.5_rk, 0._rk], BBox2%e)

  end subroutine Union2D

  @Test
  subroutine Union3D(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox1, BBox2

    BBox1 = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [3._rk, 5._rk, 7._rk])

    ! Self
    BBox2 = ovkBBUnion(BBox1, BBox1)
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 6._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 7._rk], BBox2%e)

    ! Empty left
    BBox2 = ovkBBUnion(ovk_bbox_(3), BBox1)
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 6._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 7._rk], BBox2%e)

    ! Empty right
    BBox2 = ovkBBUnion(BBox1, ovk_bbox_(3))
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 6._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 7._rk], BBox2%e)

    ! Smaller
    BBox2 = ovkBBUnion(BBox1, ovk_bbox_(3, [2.25_rk, 4.25_rk, 6.25_rk], [2.75_rk, 4.75_rk, 6.75_rk]))
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 6._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 7._rk], BBox2%e)

    ! Shifted left in x
    BBox2 = ovkBBUnion(BBox1, ovk_bbox_(3, [1.5_rk, 4._rk, 6._rk], [2.5_rk, 5._rk, 7._rk]))
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([1.5_rk, 4._rk, 6._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 7._rk], BBox2%e)

    ! Shifted right in x
    BBox2 = ovkBBUnion(BBox1, ovk_bbox_(3, [2.5_rk, 4._rk, 6._rk], [3.5_rk, 5._rk, 7._rk]))
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 6._rk], BBox2%b)
    @AssertEqual([3.5_rk, 5._rk, 7._rk], BBox2%e)

    ! Shifted left in y
    BBox2 = ovkBBUnion(BBox1, ovk_bbox_(3, [2._rk, 3.5_rk, 6._rk], [3._rk, 4.5_rk, 7._rk]))
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 3.5_rk, 6._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 7._rk], BBox2%e)

    ! Shifted right in y
    BBox2 = ovkBBUnion(BBox1, ovk_bbox_(3, [2._rk, 4.5_rk, 6._rk], [3._rk, 5.5_rk, 7._rk]))
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 6._rk], BBox2%b)
    @AssertEqual([3._rk, 5.5_rk, 7._rk], BBox2%e)

    ! Shifted left in z
    BBox2 = ovkBBUnion(BBox1, ovk_bbox_(3, [2._rk, 4._rk, 5.5_rk], [3._rk, 5._rk, 6.5_rk]))
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 5.5_rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 7._rk], BBox2%e)

    ! Shifted right in z
    BBox2 = ovkBBUnion(BBox1, ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [3._rk, 5._rk, 7.5_rk]))
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 6._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 7.5_rk], BBox2%e)

    ! Larger
    BBox2 = ovkBBUnion(BBox1, ovk_bbox_(3, [1.5_rk, 3.5_rk, 5.5_rk], [3.5_rk, 5.5_rk, 7.5_rk]))
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([1.5_rk, 3.5_rk, 5.5_rk], BBox2%b)
    @AssertEqual([3.5_rk, 5.5_rk, 7.5_rk], BBox2%e)

  end subroutine Union3D

  @Test
  subroutine Intersect2D(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox1, BBox2

    BBox1 = ovk_bbox_(2, [2._rk, 4._rk], [3._rk, 5._rk])

    ! Self
    BBox2 = ovkBBIntersect(BBox1, BBox1)
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 0._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 0._rk], BBox2%e)

    ! Empty left
    BBox2 = ovkBBIntersect(ovk_bbox_(2), BBox1)
    @AssertEqual(2, BBox2%nd)
    @AssertTrue(ovkBBIsEmpty(BBox2))

    ! Empty right
    BBox2 = ovkBBIntersect(BBox1, ovk_bbox_(2))
    @AssertEqual(2, BBox2%nd)
    @AssertTrue(ovkBBIsEmpty(BBox2))

    ! Smaller
    BBox2 = ovkBBIntersect(BBox1, ovk_bbox_(2, [2.25_rk, 4.25_rk], [2.75_rk, 4.75_rk]))
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2.25_rk, 4.25_rk, 0._rk], BBox2%b)
    @AssertEqual([2.75_rk, 4.75_rk, 0._rk], BBox2%e)

    ! Shifted left in x
    BBox2 = ovkBBIntersect(BBox1, ovk_bbox_(2, [1.5_rk, 4._rk], [2.5_rk, 5._rk]))
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 0._rk], BBox2%b)
    @AssertEqual([2.5_rk, 5._rk, 0._rk], BBox2%e)

    ! Shifted right in x
    BBox2 = ovkBBIntersect(BBox1, ovk_bbox_(2, [2.5_rk, 4._rk], [3.5_rk, 5._rk]))
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2.5_rk, 4._rk, 0._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 0._rk], BBox2%e)

    ! Shifted left in y
    BBox2 = ovkBBIntersect(BBox1, ovk_bbox_(2, [2._rk, 3.5_rk], [3._rk, 4.5_rk]))
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 0._rk], BBox2%b)
    @AssertEqual([3._rk, 4.5_rk, 0._rk], BBox2%e)

    ! Shifted right in y
    BBox2 = ovkBBIntersect(BBox1, ovk_bbox_(2, [2._rk, 4.5_rk], [3._rk, 5.5_rk]))
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2._rk, 4.5_rk, 0._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 0._rk], BBox2%e)

    ! Larger
    BBox2 = ovkBBIntersect(BBox1, ovk_bbox_(2, [1.5_rk, 3.5_rk], [3.5_rk, 5.5_rk]))
    @AssertEqual(2, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 0._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 0._rk], BBox2%e)

    ! Non-overlapping positive
    BBox2 = ovkBBIntersect(BBox1, ovk_bbox_(2, [4._rk, 6._rk], [5._rk, 7._rk]))
    @AssertEqual(2, BBox2%nd)
    @AssertTrue(ovkBBIsEmpty(BBox2))

    ! Non-overlapping negative
    BBox2 = ovkBBIntersect(BBox1, ovk_bbox_(2, [0._rk, 2._rk], [1._rk, 3._rk]))
    @AssertEqual(2, BBox2%nd)
    @AssertTrue(ovkBBIsEmpty(BBox2))

  end subroutine Intersect2D

  @Test
  subroutine Intersect3D(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox1, BBox2

    BBox1 = ovk_bbox_(3, [2._rk, 4._rk, 6._rk], [3._rk, 5._rk, 7._rk])

    ! Self
    BBox2 = ovkBBIntersect(BBox1, BBox1)
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 6._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 7._rk], BBox2%e)

    ! Empty left
    BBox2 = ovkBBIntersect(ovk_bbox_(3), BBox1)
    @AssertEqual(3, BBox2%nd)
    @AssertTrue(ovkBBIsEmpty(BBox2))

    ! Empty right
    BBox2 = ovkBBIntersect(BBox1, ovk_bbox_(3))
    @AssertEqual(3, BBox2%nd)
    @AssertTrue(ovkBBIsEmpty(BBox2))

    ! Smaller
    BBox2 = ovkBBIntersect(BBox1, ovk_bbox_(3, [2.25_rk, 4.25_rk, 6.25_rk], [2.75_rk, 4.75_rk, 6.75_rk]))
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2.25_rk, 4.25_rk, 6.25_rk], BBox2%b)
    @AssertEqual([2.75_rk, 4.75_rk, 6.75_rk], BBox2%e)

    ! Shifted left in x
    BBox2 = ovkBBIntersect(BBox1, ovk_bbox_(3, [1.5_rk, 4._rk, 6._rk], [2.5_rk, 5._rk, 7._rk]))
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 6._rk], BBox2%b)
    @AssertEqual([2.5_rk, 5._rk, 7._rk], BBox2%e)

    ! Shifted right in x
    BBox2 = ovkBBIntersect(BBox1, ovk_bbox_(3, [2.5_rk, 4._rk, 6._rk], [3.5_rk, 5._rk, 7._rk]))
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2.5_rk, 4._rk, 6._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 7._rk], BBox2%e)

    ! Shifted left in y
    BBox2 = ovkBBIntersect(BBox1, ovk_bbox_(3, [2._rk, 3.5_rk, 6._rk], [3._rk, 4.5_rk, 7._rk]))
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 6._rk], BBox2%b)
    @AssertEqual([3._rk, 4.5_rk, 7._rk], BBox2%e)

    ! Shifted right in y
    BBox2 = ovkBBIntersect(BBox1, ovk_bbox_(3, [2._rk, 4.5_rk, 6._rk], [3._rk, 5.5_rk, 7._rk]))
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 4.5_rk, 6._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 7._rk], BBox2%e)

    ! Shifted left in z
    BBox2 = ovkBBIntersect(BBox1, ovk_bbox_(3, [2._rk, 4._rk, 5.5_rk], [3._rk, 5._rk, 6.5_rk]))
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 6._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 6.5_rk], BBox2%e)

    ! Shifted right in z
    BBox2 = ovkBBIntersect(BBox1, ovk_bbox_(3, [2._rk, 4._rk, 6.5_rk], [3._rk, 5._rk, 7.5_rk]))
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 6.5_rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 7._rk], BBox2%e)

    ! Larger
    BBox2 = ovkBBIntersect(BBox1, ovk_bbox_(3, [1.5_rk, 3.5_rk, 5.5_rk], [3.5_rk, 5.5_rk, 7.5_rk]))
    @AssertEqual(3, BBox2%nd)
    @AssertEqual([2._rk, 4._rk, 6._rk], BBox2%b)
    @AssertEqual([3._rk, 5._rk, 7._rk], BBox2%e)

    ! Non-overlapping positive
    BBox2 = ovkBBIntersect(BBox1, ovk_bbox_(3, [4._rk, 6._rk, 8._rk], [5._rk, 7._rk, 9._rk]))
    @AssertEqual(3, BBox2%nd)
    @AssertTrue(ovkBBIsEmpty(BBox2))

    ! Non-overlapping negative
    BBox2 = ovkBBIntersect(BBox1, ovk_bbox_(3, [0._rk, 2._rk, 4._rk], [1._rk, 3._rk, 5._rk]))
    @AssertEqual(3, BBox2%nd)
    @AssertTrue(ovkBBIsEmpty(BBox2))

  end subroutine Intersect3D

  @Test
  subroutine FromPoints2DRank2(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox
    real(ovk_rk), dimension(2,0) :: EmptyCoords
    real(ovk_rk), dimension(2,2) :: Coords

    ! No points
    BBox = ovkBBFromPoints(EmptyCoords)
    @AssertEqual(2, BBox%nd)
    @AssertTrue(ovkBBIsEmpty(BBox))

    ! One or more points
    Coords(:,1) = [2._rk, -4._rk]
    Coords(:,2) = [-3._rk, 5._rk]
    BBox = ovkBBFromPoints(Coords)
    @AssertEqual(2, BBox%nd)
    @AssertEqual([-3._rk, -4._rk, 0._rk], BBox%b)
    @AssertEqual([2._rk, 5._rk, 0._rk], BBox%e)

  end subroutine FromPoints2DRank2

  @Test
  subroutine FromPoints3DRank2(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox
    real(ovk_rk), dimension(3,0) :: EmptyCoords
    real(ovk_rk), dimension(3,2) :: Coords

    ! No points
    BBox = ovkBBFromPoints(EmptyCoords)
    @AssertEqual(3, BBox%nd)
    @AssertTrue(ovkBBIsEmpty(BBox))

    ! One or more points
    Coords(:,1) = [2._rk, -4._rk, 6._rk]
    Coords(:,2) = [-3._rk, 5._rk, -7._rk]
    BBox = ovkBBFromPoints(Coords)
    @AssertEqual(3, BBox%nd)
    @AssertEqual([-3._rk, -4._rk, -7._rk], BBox%b)
    @AssertEqual([2._rk, 5._rk, 6._rk], BBox%e)

  end subroutine FromPoints3DRank2

  @Test
  subroutine FromPoints2DRank3(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox
    real(ovk_rk), dimension(2,0,0) :: EmptyCoords
    real(ovk_rk), dimension(2,2,2) :: Coords

    ! No points
    BBox = ovkBBFromPoints(EmptyCoords)
    @AssertEqual(2, BBox%nd)
    @AssertTrue(ovkBBIsEmpty(BBox))

    ! One or more points
    Coords(:,1,1) = [2._rk, -4._rk]
    Coords(:,2,1) = [-3._rk, 5._rk]
    Coords(:,1,2) = [4._rk, -6._rk]
    Coords(:,2,2) = [-5._rk, 7._rk]
    BBox = ovkBBFromPoints(Coords)
    @AssertEqual(2, BBox%nd)
    @AssertEqual([-5._rk, -6._rk, 0._rk], BBox%b)
    @AssertEqual([4._rk, 7._rk, 0._rk], BBox%e)

  end subroutine FromPoints2DRank3

  @Test
  subroutine FromPoints3DRank3(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox
    real(ovk_rk), dimension(3,0,0) :: EmptyCoords
    real(ovk_rk), dimension(3,2,2) :: Coords

    ! No points
    BBox = ovkBBFromPoints(EmptyCoords)
    @AssertEqual(3, BBox%nd)
    @AssertTrue(ovkBBIsEmpty(BBox))

    ! One or more points
    Coords(:,1,1) = [2._rk, -4._rk, 6._rk]
    Coords(:,2,1) = [-3._rk, 5._rk, -7._rk]
    Coords(:,1,2) = [4._rk, -6._rk, 8._rk]
    Coords(:,2,2) = [-5._rk, 7._rk, -9._rk]
    BBox = ovkBBFromPoints(Coords)
    @AssertEqual(3, BBox%nd)
    @AssertEqual([-5._rk, -6._rk, -9._rk], BBox%b)
    @AssertEqual([4._rk, 7._rk, 8._rk], BBox%e)

  end subroutine FromPoints3DRank3

  @Test
  subroutine FromPoints2DRank4(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox
    real(ovk_rk), dimension(2,0,0,0) :: EmptyCoords
    real(ovk_rk), dimension(2,2,2,2) :: Coords

    ! No points
    BBox = ovkBBFromPoints(EmptyCoords)
    @AssertEqual(2, BBox%nd)
    @AssertTrue(ovkBBIsEmpty(BBox))

    ! One or more points
    Coords(:,1,1,1) = [2._rk, -4._rk]
    Coords(:,2,1,1) = [-3._rk, 5._rk]
    Coords(:,1,2,1) = [4._rk, -6._rk]
    Coords(:,2,2,1) = [-5._rk, 7._rk]
    Coords(:,1,1,2) = [6._rk, -8._rk]
    Coords(:,2,1,2) = [-7._rk, 9._rk]
    Coords(:,1,2,2) = [8._rk, -10._rk]
    Coords(:,2,2,2) = [-9._rk, 11._rk]
    BBox = ovkBBFromPoints(Coords)
    @AssertEqual(2, BBox%nd)
    @AssertEqual([-9._rk, -10._rk, 0._rk], BBox%b)
    @AssertEqual([8._rk, 11._rk, 0._rk], BBox%e)

  end subroutine FromPoints2DRank4

  @Test
  subroutine FromPoints3DRank4(this)

    class(t_bounding_box_test), intent(inout) :: this

    type(ovk_bbox) :: BBox
    real(ovk_rk), dimension(3,0,0,0) :: EmptyCoords
    real(ovk_rk), dimension(3,2,2,2) :: Coords

    ! No points
    BBox = ovkBBFromPoints(EmptyCoords)
    @AssertEqual(3, BBox%nd)
    @AssertTrue(ovkBBIsEmpty(BBox))

    ! One or more points
    Coords(:,1,1,1) = [2._rk, -4._rk, 6._rk]
    Coords(:,2,1,1) = [-3._rk, 5._rk, -7._rk]
    Coords(:,1,2,1) = [4._rk, -6._rk, 8._rk]
    Coords(:,2,2,1) = [-5._rk, 7._rk, -9._rk]
    Coords(:,1,1,2) = [6._rk, -8._rk, 10._rk]
    Coords(:,2,1,2) = [-7._rk, 9._rk, -11._rk]
    Coords(:,1,2,2) = [8._rk, -10._rk, 12._rk]
    Coords(:,2,2,2) = [-9._rk, 11._rk, -13._rk]
    BBox = ovkBBFromPoints(Coords)
    @AssertEqual(3, BBox%nd)
    @AssertEqual([-9._rk, -10._rk, -13._rk], BBox%b)
    @AssertEqual([8._rk, 11._rk, 12._rk], BBox%e)

  end subroutine FromPoints3DRank4

end module BoundingBoxTest
