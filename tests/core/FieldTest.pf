! Copyright (c) 2017 Matthew J. Smith and Overkit contributors
! License: MIT (http://opensource.org/licenses/MIT)

module FieldTest

  use pFUnit_mod
  use Overkit
  use ovsGlobal
  implicit none

  @TestCase
  type, extends(TestCase) :: t_field_test
  end type t_field_test

contains

  @Test
  subroutine DefaultInitializeInteger(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_field_int) :: Field

    Field = ovk_field_int_()

    @AssertTrue(ovk_cart_() == Field%cart)
    @AssertFalse(allocated(Field%values))

  end subroutine DefaultInitializeInteger

  @Test
  subroutine DefaultInitializeLargeInteger(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_field_large_int) :: Field

    Field = ovk_field_large_int_()

    @AssertTrue(ovk_cart_() == Field%cart)
    @AssertFalse(allocated(Field%values))

  end subroutine DefaultInitializeLargeInteger

  @Test
  subroutine DefaultInitializeReal(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_field_real) :: Field

    Field = ovk_field_real_()

    @AssertTrue(ovk_cart_() == Field%cart)
    @AssertFalse(allocated(Field%values))

  end subroutine DefaultInitializeReal

  @Test
  subroutine DefaultInitializeLogical(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_field_logical) :: Field

    Field = ovk_field_logical_()

    @AssertTrue(ovk_cart_() == Field%cart)
    @AssertFalse(allocated(Field%values))

  end subroutine DefaultInitializeLogical

  @Test
  subroutine CreateInteger(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: Cart
    integer, dimension(2,3) :: ValuesRank2
    integer, dimension(2,3,4) :: ValuesRank3
    type(ovk_field_int) :: Field

    ValuesRank2(1,:) = 1
    ValuesRank2(2,:) = 2
    ValuesRank3(1,:,:) = 1
    ValuesRank3(2,:,:) = 2

    ! 2D
    Cart = ovk_cart_(2, [2,3], [.true.,.false.])

    ! 2D, empty
    Field = ovk_field_int_(2)

    @AssertTrue(ovk_cart_(2) == Field%cart)
    @AssertFalse(allocated(Field%values))

    ! 2D with no initial values
    Field = ovk_field_int_(Cart)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,1], shape(Field%values))

    ! 2D with scalar initial value
    Field = ovk_field_int_(Cart, 1)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,1], shape(Field%values))
    @AssertTrue(all(1 == Field%values))

    ! 2D with rank 2 initial values
    Field = ovk_field_int_(Cart, ValuesRank2)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,1], shape(Field%values))
    @AssertEqual(ValuesRank2, Field%values(:,:,1))

    ! 2D with rank 3 initial values
    Field = ovk_field_int_(Cart, ValuesRank3(:,:,:1))

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,1], shape(Field%values))
    @AssertTrue(all(ValuesRank3(:,:,:1) == Field%values))

    ! 3D
    Cart = ovk_cart_(3, [2,3,4], [.true.,.false.,.false.])

    ! 3D, empty
    Field = ovk_field_int_(3)

    @AssertTrue(ovk_cart_(3) == Field%cart)
    @AssertFalse(allocated(Field%values))

    ! 3D with no initial values
    Field = ovk_field_int_(Cart)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,4], shape(Field%values))

    ! 3D with scalar initial value
    Field = ovk_field_int_(Cart, 1)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,4], shape(Field%values))
    @AssertTrue(all(1 == Field%values))

    ! 3D with rank 3 initial values
    Field = ovk_field_int_(Cart, ValuesRank3)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,4], shape(Field%values))
    @AssertTrue(all(ValuesRank3 == Field%values))

  end subroutine CreateInteger

  @Test
  subroutine CreateLargeInteger(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: Cart
    integer(lk), dimension(2,3) :: ValuesRank2
    integer(lk), dimension(2,3,4) :: ValuesRank3
    type(ovk_field_large_int) :: Field

    ValuesRank2(1,:) = 1_lk
    ValuesRank2(2,:) = 2_lk
    ValuesRank3(1,:,:) = 1_lk
    ValuesRank3(2,:,:) = 2_lk

    ! 2D
    Cart = ovk_cart_(2, [2,3], [.true.,.false.])

    ! 2D, empty
    Field = ovk_field_large_int_(2)

    @AssertTrue(ovk_cart_(2) == Field%cart)
    @AssertFalse(allocated(Field%values))

    ! 2D with no initial values
    Field = ovk_field_large_int_(Cart)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,1], shape(Field%values))

    ! 2D with scalar initial value
    Field = ovk_field_large_int_(Cart, 1_lk)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,1], shape(Field%values))
    @AssertTrue(all(1_lk == Field%values))

    ! 2D with rank 2 initial values
    Field = ovk_field_large_int_(Cart, ValuesRank2)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,1], shape(Field%values))
    @AssertTrue(all(ValuesRank2 == Field%values(:,:,1)))

    ! 2D with rank 3 initial values
    Field = ovk_field_large_int_(Cart, ValuesRank3(:,:,:1))

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,1], shape(Field%values))
    @AssertTrue(all(ValuesRank3(:,:,:1) == Field%values))

    ! 3D
    Cart = ovk_cart_(3, [2,3,4], [.true.,.false.,.false.])

    ! 3D, empty
    Field = ovk_field_large_int_(3)

    @AssertTrue(ovk_cart_(3) == Field%cart)
    @AssertFalse(allocated(Field%values))

    ! 3D with no initial values
    Field = ovk_field_large_int_(Cart)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,4], shape(Field%values))

    ! 3D with scalar initial value
    Field = ovk_field_large_int_(Cart, 1_lk)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,4], shape(Field%values))
    @AssertTrue(all(1_lk == Field%values))

    ! 3D with rank 3 initial values
    Field = ovk_field_large_int_(Cart, ValuesRank3)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,4], shape(Field%values))
    @AssertTrue(all(ValuesRank3 == Field%values))

  end subroutine CreateLargeInteger

  @Test
  subroutine CreateReal(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: Cart
    real(rk), dimension(2,3) :: ValuesRank2
    real(rk), dimension(2,3,4) :: ValuesRank3
    type(ovk_field_real) :: Field

    ValuesRank2(1,:) = 1._rk
    ValuesRank2(2,:) = 2._rk
    ValuesRank3(1,:,:) = 1._rk
    ValuesRank3(2,:,:) = 2._rk

    ! 2D
    Cart = ovk_cart_(2, [2,3], [.true.,.false.])

    ! 2D, empty
    Field = ovk_field_real_(2)

    @AssertTrue(ovk_cart_(2) == Field%cart)
    @AssertFalse(allocated(Field%values))

    ! 2D with no initial values
    Field = ovk_field_real_(Cart)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,1], shape(Field%values))

    ! 2D with scalar initial value
    Field = ovk_field_real_(Cart, 1._rk)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,1], shape(Field%values))
    @AssertEqual(1._rk, Field%values)

    ! 2D with rank 2 initial values
    Field = ovk_field_real_(Cart, ValuesRank2)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,1], shape(Field%values))
    @AssertEqual(ValuesRank2, Field%values(:,:,1))

    ! 2D with rank 3 initial values
    Field = ovk_field_real_(Cart, ValuesRank3(:,:,:1))

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,1], shape(Field%values))
    @AssertEqual(ValuesRank3(:,:,:1), Field%values)

    ! 3D
    Cart = ovk_cart_(3, [2,3,4], [.true.,.false.,.false.])

    ! 3D, empty
    Field = ovk_field_real_(3)

    @AssertTrue(ovk_cart_(3) == Field%cart)
    @AssertFalse(allocated(Field%values))

    ! 3D with no initial values
    Field = ovk_field_real_(Cart)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,4], shape(Field%values))

    ! 3D with scalar initial value
    Field = ovk_field_real_(Cart, 1._rk)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,4], shape(Field%values))
    @AssertEqual(1._rk, Field%values)

    ! 3D with rank 3 initial values
    Field = ovk_field_real_(Cart, ValuesRank3)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,4], shape(Field%values))
    @AssertEqual(ValuesRank3, Field%values)

  end subroutine CreateReal

  @Test
  subroutine CreateLogical(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: Cart
    logical, dimension(2,3) :: ValuesRank2
    logical, dimension(2,3,4) :: ValuesRank3
    logical(bk), dimension(2,3) :: ValuesRank2_1Byte
    logical(bk), dimension(2,3,4) :: ValuesRank3_1Byte
    type(ovk_field_logical) :: Field

    ValuesRank2(1,:) = .false.
    ValuesRank2(2,:) = .true.
    ValuesRank3(1,:,:) = .false.
    ValuesRank3(2,:,:) = .true.

    ValuesRank2_1Byte(1,:) = .false.
    ValuesRank2_1Byte(2,:) = .true.
    ValuesRank3_1Byte(1,:,:) = .false.
    ValuesRank3_1Byte(2,:,:) = .true.

    ! 2D
    Cart = ovk_cart_(2, [2,3], [.true.,.false.])

    ! 2D, empty
    Field = ovk_field_logical_(2)

    @AssertTrue(ovk_cart_(2) == Field%cart)
    @AssertFalse(allocated(Field%values))

    ! 2D with no initial values
    Field = ovk_field_logical_(Cart)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,1], shape(Field%values))

    ! 2D with scalar initial value
    Field = ovk_field_logical_(Cart, .true.)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,1], shape(Field%values))
    @AssertTrue(logical(all(Field%values)))

    ! 2D with scalar initial value (1 byte)
    Field = ovk_field_logical_(Cart, logical(.true.,kind=bk))

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,1], shape(Field%values))
    @AssertTrue(logical(all(Field%values)))

    ! 2D with rank 2 initial values
    Field = ovk_field_logical_(Cart, ValuesRank2)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,1], shape(Field%values))
    @AssertTrue(all(ValuesRank2 .eqv. Field%values(:,:,1)))

    ! 2D with rank 2 initial values
    Field = ovk_field_logical_(Cart, ValuesRank2_1Byte)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,1], shape(Field%values))
    @AssertTrue(logical(all(ValuesRank2_1Byte .eqv. Field%values(:,:,1))))

    ! 2D with rank 3 initial values
    Field = ovk_field_logical_(Cart, ValuesRank3(:,:,:1))

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,1], shape(Field%values))
    @AssertTrue(all(ValuesRank3(:,:,:1) .eqv. Field%values))

    ! 2D with rank 3 initial values (1 byte)
    Field = ovk_field_logical_(Cart, ValuesRank3_1Byte(:,:,:1))

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,1], shape(Field%values))
    @AssertTrue(logical(all(ValuesRank3_1Byte(:,:,:1) .eqv. Field%values)))

    ! 3D
    Cart = ovk_cart_(3, [2,3,4], [.true.,.false.,.false.])

    ! 3D, empty
    Field = ovk_field_logical_(3)

    @AssertTrue(ovk_cart_(3) == Field%cart)
    @AssertFalse(allocated(Field%values))

    ! 3D with no initial values
    Field = ovk_field_logical_(Cart)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,4], shape(Field%values))

    ! 3D with scalar initial value
    Field = ovk_field_logical_(Cart, .true.)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,4], shape(Field%values))
    @AssertTrue(logical(all(Field%values)))

    ! 3D with scalar initial value (1 byte)
    Field = ovk_field_logical_(Cart, logical(.true.,kind=bk))

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,4], shape(Field%values))
    @AssertTrue(logical(all(Field%values)))

    ! 3D with rank 3 initial values
    Field = ovk_field_logical_(Cart, ValuesRank3)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,4], shape(Field%values))
    @AssertTrue(all(ValuesRank3 .eqv. Field%values))

    ! 3D with rank 3 initial values (1 byte)
    Field = ovk_field_logical_(Cart, ValuesRank3_1Byte)

    @AssertTrue(Cart == Field%cart)
    @AssertTrue(allocated(Field%values))
    @AssertEqual([2,3,4], shape(Field%values))
    @AssertTrue(logical(all(ValuesRank3_1Byte .eqv. Field%values)))

  end subroutine CreateLogical

  @Test
  subroutine DestroyInteger(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_field_int) :: Field

    Field = ovk_field_int_(ovk_cart_(2, [3,1]))
    Field = ovk_field_int_()

    @AssertFalse(allocated(Field%values))

  end subroutine DestroyInteger

  @Test
  subroutine DestroyLargeInteger(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_field_large_int) :: Field

    Field = ovk_field_large_int_(ovk_cart_(2, [3,1]))
    Field = ovk_field_large_int_()

    @AssertFalse(allocated(Field%values))

  end subroutine DestroyLargeInteger

  @Test
  subroutine DestroyReal(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_field_real) :: Field

    Field = ovk_field_real_(ovk_cart_(2, [3,1]))
    Field = ovk_field_real_()

    @AssertFalse(allocated(Field%values))

  end subroutine DestroyReal

  @Test
  subroutine DestroyLogical(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_field_logical) :: Field

    Field = ovk_field_logical_(ovk_cart_(2, [3,1]))
    Field = ovk_field_logical_()

    @AssertFalse(allocated(Field%values))

  end subroutine DestroyLogical

  @Test
  subroutine EqualityInteger(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: Cart
    integer, dimension(3,3) :: Values
    type(ovk_field_int) :: Field1, Field2

    Cart = ovk_cart_(2, [3,3])

    Values = reshape([ &
      1, 2, 3, &
      4, 5, 6, &
      7, 8, 9 &
    ], [3,3])

    Field1 = ovk_field_int_(Cart, Values)

    ! Self
    @AssertTrue(Field1 == Field1)

    ! Other with same data
    Field2 = ovk_field_int_(Cart, Values)
    @AssertTrue(Field1 == Field2)

    ! Different dimension
    Field2 = ovk_field_int_(ovk_cart_(3, [3,3,1]), reshape(Values, [3,3,1]))
    @AssertTrue(Field1 /= Field2)

    ! Different shape
    Field2 = ovk_field_int_(ovk_cart_(2, [2,2]), 1)
    @AssertTrue(Field1 /= Field2)

    ! Different values
    Field2 = ovk_field_int_(Cart, 1)
    @AssertTrue(Field1 /= Field2)

  end subroutine EqualityInteger

  @Test
  subroutine EqualityLargeInteger(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: Cart
    integer(lk), dimension(3,3) :: Values
    type(ovk_field_large_int) :: Field1, Field2

    Cart = ovk_cart_(2, [3,3])

    Values = reshape([ &
      1_lk, 2_lk, 3_lk, &
      4_lk, 5_lk, 6_lk, &
      7_lk, 8_lk, 9_lk &
    ], [3,3])

    Field1 = ovk_field_large_int_(Cart, Values)

    ! Self
    @AssertTrue(Field1 == Field1)

    ! Other with same data
    Field2 = ovk_field_large_int_(Cart, Values)
    @AssertTrue(Field1 == Field2)

    ! Different dimension
    Field2 = ovk_field_large_int_(ovk_cart_(3, [3,3,1]), reshape(Values, [3,3,1]))
    @AssertTrue(Field1 /= Field2)

    ! Different shape
    Field2 = ovk_field_large_int_(ovk_cart_(2, [2,2]), 1_lk)
    @AssertTrue(Field1 /= Field2)

    ! Different values
    Field2 = ovk_field_large_int_(Cart, 1_lk)
    @AssertTrue(Field1 /= Field2)

  end subroutine EqualityLargeInteger

  @Test
  subroutine EqualityReal(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: Cart
    real(rk), dimension(3,3) :: Values
    type(ovk_field_real) :: Field1, Field2

    Cart = ovk_cart_(2, [3,3])

    Values = reshape([ &
      1._rk, 2._rk, 3._rk, &
      4._rk, 5._rk, 6._rk, &
      7._rk, 8._rk, 9._rk &
    ], [3,3])

    Field1 = ovk_field_real_(Cart, Values)

    ! Self
    @AssertTrue(Field1 == Field1)

    ! Other with same data
    Field2 = ovk_field_real_(Cart, Values)
    @AssertTrue(Field1 == Field2)

    ! Different dimension
    Field2 = ovk_field_real_(ovk_cart_(3, [3,3,1]), reshape(Values, [3,3,1]))
    @AssertTrue(Field1 /= Field2)

    ! Different shape
    Field2 = ovk_field_real_(ovk_cart_(2, [2,2]), 1._rk)
    @AssertTrue(Field1 /= Field2)

    ! Different values
    Field2 = ovk_field_real_(Cart, 1._rk)
    @AssertTrue(Field1 /= Field2)

  end subroutine EqualityReal

  @Test
  subroutine EqualityLogical(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: Cart
    logical, dimension(3,3) :: Values
    type(ovk_field_logical) :: Field1, Field2

    Cart = ovk_cart_(2, [3,3])

    Values = reshape([ &
      .false., .true., .true., &
      .false., .true., .false., &
      .true., .false., .false. &
    ], [3,3])

    Field1 = ovk_field_logical_(Cart, Values)

    ! Self
    @AssertTrue(Field1 == Field1)

    ! Other with same data
    Field2 = ovk_field_logical_(Cart, Values)
    @AssertTrue(Field1 == Field2)

    ! Different dimension
    Field2 = ovk_field_logical_(ovk_cart_(3, [3,3,1]), reshape(Values, [3,3,1]))
    @AssertTrue(Field1 /= Field2)

    ! Different shape
    Field2 = ovk_field_logical_(ovk_cart_(2, [2,2]), .true.)
    @AssertTrue(Field1 /= Field2)

    ! Different values
    Field2 = ovk_field_logical_(Cart, .true.)
    @AssertTrue(Field1 /= Field2)

  end subroutine EqualityLogical

  @Test
  subroutine PeriodicFillInteger2D(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: PrincipalCart, ExtendedCart
    type(ovk_field_int) :: Field
    integer, dimension(3,3) :: ExpectedValues1
    integer, dimension(0:3,0:3) :: ExpectedValues2

    PrincipalCart = ovk_cart_(2, [2,2], [.true.,.true.], OVK_NO_OVERLAP_PERIODIC)

    ! Overlap periodic fill
    ExtendedCart = ovk_cart_(2, [3,3], [.true.,.true.], OVK_OVERLAP_PERIODIC)
    Field = ovk_field_int_(ExtendedCart)

    Field%values(:2,:2,1) = reshape([ &
      1,2, &
      3,4 &
    ], [2,2])

    ExpectedValues1 = reshape([ &
      1,2,1, &
      3,4,3, &
      1,2,1 &
    ], [3,3])

    call ovkFieldPeriodicFill(Field, PrincipalCart)

    @AssertTrue(all(ExpectedValues1 == Field%values(:,:,1)))

    ! Extended fill
    ExtendedCart = ovk_cart_(2, [0,0], [3,3])
    Field = ovk_field_int_(ExtendedCart)

    Field%values(1:2,1:2,1) = reshape([ &
      1,2, &
      3,4 &
    ], [2,2])

    ExpectedValues2 = reshape([ &
      4,3,4,3, &
      2,1,2,1, &
      4,3,4,3, &
      2,1,2,1 &
    ], [4,4])

    call ovkFieldPeriodicFill(Field, PrincipalCart)

    @AssertTrue(all(ExpectedValues2 == Field%values(:,:,1)))

  end subroutine PeriodicFillInteger2D

  @Test
  subroutine PeriodicFillInteger3D(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: PrincipalCart, ExtendedCart
    type(ovk_field_int) :: Field
    integer, dimension(3,3,3) :: ExpectedValues1
    integer, dimension(0:3,0:3,0:3) :: ExpectedValues2

    PrincipalCart = ovk_cart_(3, [2,2,2], [.true.,.true.,.true.], OVK_NO_OVERLAP_PERIODIC)

    ! Overlap periodic fill
    ExtendedCart = ovk_cart_(3, [3,3,3], [.true.,.true.,.true.], OVK_OVERLAP_PERIODIC)
    Field = ovk_field_int_(ExtendedCart)

    Field%values(:2,:2,1) = reshape([ &
      1,2, &
      3,4 &
    ], [2,2])

    Field%values(:2,:2,2) = reshape([ &
      5,6, &
      7,8 &
    ], [2,2])

    ExpectedValues1(:,:,1) = reshape([ &
      1,2,1, &
      3,4,3, &
      1,2,1 &
    ], [3,3])

    ExpectedValues1(:,:,2) = reshape([ &
      5,6,5, &
      7,8,7, &
      5,6,5 &
    ], [3,3])

    ExpectedValues1(:,:,3) = reshape([ &
      1,2,1, &
      3,4,3, &
      1,2,1 &
    ], [3,3])

    call ovkFieldPeriodicFill(Field, PrincipalCart)

    @AssertTrue(all(ExpectedValues1 == Field%values))

    ! Extended fill
    ExtendedCart = ovk_cart_(3, [0,0,0], [3,3,3])
    Field = ovk_field_int_(ExtendedCart)

    Field%values(1:2,1:2,1) = reshape([ &
      1,2, &
      3,4 &
    ], [2,2])

    Field%values(1:2,1:2,2) = reshape([ &
      5,6, &
      7,8 &
    ], [2,2])

    ExpectedValues2(:,:,0) = reshape([ &
      8,7,8,7, &
      6,5,6,5, &
      8,7,8,7, &
      6,5,6,5 &
    ], [4,4])

    ExpectedValues2(:,:,1) = reshape([ &
      4,3,4,3, &
      2,1,2,1, &
      4,3,4,3, &
      2,1,2,1 &
    ], [4,4])

    ExpectedValues2(:,:,2) = reshape([ &
      8,7,8,7, &
      6,5,6,5, &
      8,7,8,7, &
      6,5,6,5 &
    ], [4,4])

    ExpectedValues2(:,:,3) = reshape([ &
      4,3,4,3, &
      2,1,2,1, &
      4,3,4,3, &
      2,1,2,1 &
    ], [4,4])

    call ovkFieldPeriodicFill(Field, PrincipalCart)

    @AssertTrue(all(ExpectedValues2 == Field%values))

  end subroutine PeriodicFillInteger3D

  @Test
  subroutine PeriodicFillLargeInteger2D(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: PrincipalCart, ExtendedCart
    type(ovk_field_large_int) :: Field
    integer(lk), dimension(3,3) :: ExpectedValues1
    integer(lk), dimension(0:3,0:3) :: ExpectedValues2

    PrincipalCart = ovk_cart_(2, [2,2], [.true.,.true.], OVK_NO_OVERLAP_PERIODIC)

    ! Overlap periodic fill
    ExtendedCart = ovk_cart_(2, [3,3], [.true.,.true.], OVK_OVERLAP_PERIODIC)
    Field = ovk_field_large_int_(ExtendedCart)

    Field%values(:2,:2,1) = reshape([ &
      1_lk,2_lk, &
      3_lk,4_lk &
    ], [2,2])

    ExpectedValues1 = reshape([ &
      1_lk,2_lk,1_lk, &
      3_lk,4_lk,3_lk, &
      1_lk,2_lk,1_lk &
    ], [3,3])

    call ovkFieldPeriodicFill(Field, PrincipalCart)

    @AssertTrue(all(ExpectedValues1 == Field%values(:,:,1)))

    ! Extended fill
    ExtendedCart = ovk_cart_(2, [0,0], [3,3])
    Field = ovk_field_large_int_(ExtendedCart)

    Field%values(1:2,1:2,1) = reshape([ &
      1_lk,2_lk, &
      3_lk,4_lk &
    ], [2,2])

    ExpectedValues2 = reshape([ &
      4_lk,3_lk,4_lk,3_lk, &
      2_lk,1_lk,2_lk,1_lk, &
      4_lk,3_lk,4_lk,3_lk, &
      2_lk,1_lk,2_lk,1_lk &
    ], [4,4])

    call ovkFieldPeriodicFill(Field, PrincipalCart)

    @AssertTrue(all(ExpectedValues2 == Field%values(:,:,1)))

  end subroutine PeriodicFillLargeInteger2D

  @Test
  subroutine PeriodicFillLargeInteger3D(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: PrincipalCart, ExtendedCart
    type(ovk_field_large_int) :: Field
    integer(lk), dimension(3,3,3) :: ExpectedValues1
    integer(lk), dimension(0:3,0:3,0:3) :: ExpectedValues2

    PrincipalCart = ovk_cart_(3, [2,2,2], [.true.,.true.,.true.], OVK_NO_OVERLAP_PERIODIC)

    ! Overlap periodic fill
    ExtendedCart = ovk_cart_(3, [3,3,3], [.true.,.true.,.true.], OVK_OVERLAP_PERIODIC)
    Field = ovk_field_large_int_(ExtendedCart)

    Field%values(:2,:2,1) = reshape([ &
      1_lk,2_lk, &
      3_lk,4_lk &
    ], [2,2])

    Field%values(:2,:2,2) = reshape([ &
      5_lk,6_lk, &
      7_lk,8_lk &
    ], [2,2])

    ExpectedValues1(:,:,1) = reshape([ &
      1_lk,2_lk,1_lk, &
      3_lk,4_lk,3_lk, &
      1_lk,2_lk,1_lk &
    ], [3,3])

    ExpectedValues1(:,:,2) = reshape([ &
      5_lk,6_lk,5_lk, &
      7_lk,8_lk,7_lk, &
      5_lk,6_lk,5_lk &
    ], [3,3])

    ExpectedValues1(:,:,3) = reshape([ &
      1_lk,2_lk,1_lk, &
      3_lk,4_lk,3_lk, &
      1_lk,2_lk,1_lk &
    ], [3,3])

    call ovkFieldPeriodicFill(Field, PrincipalCart)

    @AssertTrue(all(ExpectedValues1 == Field%values))

    ! Extended fill
    ExtendedCart = ovk_cart_(3, [0,0,0], [3,3,3])
    Field = ovk_field_large_int_(ExtendedCart)

    Field%values(1:2,1:2,1) = reshape([ &
      1_lk,2_lk, &
      3_lk,4_lk &
    ], [2,2])

    Field%values(1:2,1:2,2) = reshape([ &
      5_lk,6_lk, &
      7_lk,8_lk &
    ], [2,2])

    ExpectedValues2(:,:,0) = reshape([ &
      8_lk,7_lk,8_lk,7_lk, &
      6_lk,5_lk,6_lk,5_lk, &
      8_lk,7_lk,8_lk,7_lk, &
      6_lk,5_lk,6_lk,5_lk &
    ], [4,4])

    ExpectedValues2(:,:,1) = reshape([ &
      4_lk,3_lk,4_lk,3_lk, &
      2_lk,1_lk,2_lk,1_lk, &
      4_lk,3_lk,4_lk,3_lk, &
      2_lk,1_lk,2_lk,1_lk &
    ], [4,4])

    ExpectedValues2(:,:,2) = reshape([ &
      8_lk,7_lk,8_lk,7_lk, &
      6_lk,5_lk,6_lk,5_lk, &
      8_lk,7_lk,8_lk,7_lk, &
      6_lk,5_lk,6_lk,5_lk &
    ], [4,4])

    ExpectedValues2(:,:,3) = reshape([ &
      4_lk,3_lk,4_lk,3_lk, &
      2_lk,1_lk,2_lk,1_lk, &
      4_lk,3_lk,4_lk,3_lk, &
      2_lk,1_lk,2_lk,1_lk &
    ], [4,4])

    call ovkFieldPeriodicFill(Field, PrincipalCart)

    @AssertTrue(all(ExpectedValues2 == Field%values))

  end subroutine PeriodicFillLargeInteger3D

  @Test
  subroutine PeriodicFillReal2D(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: PrincipalCart, ExtendedCart
    type(ovk_field_real) :: Field
    real(rk), dimension(3,3) :: ExpectedValues1
    real(rk), dimension(0:3,0:3) :: ExpectedValues2

    PrincipalCart = ovk_cart_(2, [2,2], [.true.,.true.], OVK_NO_OVERLAP_PERIODIC)

    ! Overlap periodic fill
    ExtendedCart = ovk_cart_(2, [3,3], [.true.,.true.], OVK_OVERLAP_PERIODIC)
    Field = ovk_field_real_(ExtendedCart)

    Field%values(:2,:2,1) = reshape([ &
      1._rk,2._rk, &
      3._rk,4._rk &
    ], [2,2])

    ExpectedValues1 = reshape([ &
      1._rk,2._rk,1._rk, &
      3._rk,4._rk,3._rk, &
      1._rk,2._rk,1._rk &
    ], [3,3])

    call ovkFieldPeriodicFill(Field, PrincipalCart)

    @AssertTrue(all(ExpectedValues1 == Field%values(:,:,1)))

    ! Extended fill
    ExtendedCart = ovk_cart_(2, [0,0], [3,3])
    Field = ovk_field_real_(ExtendedCart)

    Field%values(1:2,1:2,1) = reshape([ &
      1._rk,2._rk, &
      3._rk,4._rk &
    ], [2,2])

    ExpectedValues2 = reshape([ &
      4._rk,3._rk,4._rk,3._rk, &
      2._rk,1._rk,2._rk,1._rk, &
      4._rk,3._rk,4._rk,3._rk, &
      2._rk,1._rk,2._rk,1._rk &
    ], [4,4])

    call ovkFieldPeriodicFill(Field, PrincipalCart)

    @AssertTrue(all(ExpectedValues2 == Field%values(:,:,1)))

  end subroutine PeriodicFillReal2D

  @Test
  subroutine PeriodicFillReal3D(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: PrincipalCart, ExtendedCart
    type(ovk_field_real) :: Field
    real(rk), dimension(3,3,3) :: ExpectedValues1
    real(rk), dimension(0:3,0:3,0:3) :: ExpectedValues2

    PrincipalCart = ovk_cart_(3, [2,2,2], [.true.,.true.,.true.], OVK_NO_OVERLAP_PERIODIC)

    ! Overlap periodic fill
    ExtendedCart = ovk_cart_(3, [3,3,3], [.true.,.true.,.true.], OVK_OVERLAP_PERIODIC)
    Field = ovk_field_real_(ExtendedCart)

    Field%values(:2,:2,1) = reshape([ &
      1._rk,2._rk, &
      3._rk,4._rk &
    ], [2,2])

    Field%values(:2,:2,2) = reshape([ &
      5._rk,6._rk, &
      7._rk,8._rk &
    ], [2,2])

    ExpectedValues1(:,:,1) = reshape([ &
      1._rk,2._rk,1._rk, &
      3._rk,4._rk,3._rk, &
      1._rk,2._rk,1._rk &
    ], [3,3])

    ExpectedValues1(:,:,2) = reshape([ &
      5._rk,6._rk,5._rk, &
      7._rk,8._rk,7._rk, &
      5._rk,6._rk,5._rk &
    ], [3,3])

    ExpectedValues1(:,:,3) = reshape([ &
      1._rk,2._rk,1._rk, &
      3._rk,4._rk,3._rk, &
      1._rk,2._rk,1._rk &
    ], [3,3])

    call ovkFieldPeriodicFill(Field, PrincipalCart)

    @AssertTrue(all(ExpectedValues1 == Field%values))

    ! Extended fill
    ExtendedCart = ovk_cart_(3, [0,0,0], [3,3,3])
    Field = ovk_field_real_(ExtendedCart)

    Field%values(1:2,1:2,1) = reshape([ &
      1._rk,2._rk, &
      3._rk,4._rk &
    ], [2,2])

    Field%values(1:2,1:2,2) = reshape([ &
      5._rk,6._rk, &
      7._rk,8._rk &
    ], [2,2])

    ExpectedValues2(:,:,0) = reshape([ &
      8._rk,7._rk,8._rk,7._rk, &
      6._rk,5._rk,6._rk,5._rk, &
      8._rk,7._rk,8._rk,7._rk, &
      6._rk,5._rk,6._rk,5._rk &
    ], [4,4])

    ExpectedValues2(:,:,1) = reshape([ &
      4._rk,3._rk,4._rk,3._rk, &
      2._rk,1._rk,2._rk,1._rk, &
      4._rk,3._rk,4._rk,3._rk, &
      2._rk,1._rk,2._rk,1._rk &
    ], [4,4])

    ExpectedValues2(:,:,2) = reshape([ &
      8._rk,7._rk,8._rk,7._rk, &
      6._rk,5._rk,6._rk,5._rk, &
      8._rk,7._rk,8._rk,7._rk, &
      6._rk,5._rk,6._rk,5._rk &
    ], [4,4])

    ExpectedValues2(:,:,3) = reshape([ &
      4._rk,3._rk,4._rk,3._rk, &
      2._rk,1._rk,2._rk,1._rk, &
      4._rk,3._rk,4._rk,3._rk, &
      2._rk,1._rk,2._rk,1._rk &
    ], [4,4])

    call ovkFieldPeriodicFill(Field, PrincipalCart)

    @AssertTrue(all(ExpectedValues2 == Field%values))

  end subroutine PeriodicFillReal3D

  @Test
  subroutine PeriodicFillLogical2D(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: PrincipalCart, ExtendedCart
    type(ovk_field_logical) :: Field
    logical, dimension(3,3) :: ExpectedValues1
    logical, dimension(0:3,0:3) :: ExpectedValues2

    PrincipalCart = ovk_cart_(2, [2,2], [.true.,.true.], OVK_NO_OVERLAP_PERIODIC)

    ! Overlap periodic fill
    ExtendedCart = ovk_cart_(2, [3,3], [.true.,.true.], OVK_OVERLAP_PERIODIC)
    Field = ovk_field_logical_(ExtendedCart)

    Field%values(:2,:2,1) = reshape([ &
      .false.,.true., &
      .true.,.false. &
    ], [2,2])

    ExpectedValues1 = reshape([ &
      .false.,.true.,.false., &
      .true.,.false.,.true., &
      .false.,.true.,.false. &
    ], [3,3])

    call ovkFieldPeriodicFill(Field, PrincipalCart)

    @AssertTrue(all(ExpectedValues1 .eqv. Field%values(:,:,1)))

    ! Extended fill
    ExtendedCart = ovk_cart_(2, [0,0], [3,3])
    Field = ovk_field_logical_(ExtendedCart)

    Field%values(1:2,1:2,1) = reshape([ &
      .false.,.true., &
      .true.,.false. &
    ], [2,2])

    ExpectedValues2 = reshape([ &
      .false.,.true.,.false.,.true., &
      .true.,.false.,.true.,.false., &
      .false.,.true.,.false.,.true., &
      .true.,.false.,.true.,.false. &
    ], [4,4])

    call ovkFieldPeriodicFill(Field, PrincipalCart)

    @AssertTrue(all(ExpectedValues2 .eqv. Field%values(:,:,1)))

  end subroutine PeriodicFillLogical2D

  @Test
  subroutine PeriodicFillLogical3D(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: PrincipalCart, ExtendedCart
    type(ovk_field_logical) :: Field
    logical, dimension(3,3,3) :: ExpectedValues1
    logical, dimension(0:3,0:3,0:3) :: ExpectedValues2

    PrincipalCart = ovk_cart_(3, [2,2,2], [.true.,.true.,.true.], OVK_NO_OVERLAP_PERIODIC)

    ! Overlap periodic fill
    ExtendedCart = ovk_cart_(3, [3,3,3], [.true.,.true.,.true.], OVK_OVERLAP_PERIODIC)
    Field = ovk_field_logical_(ExtendedCart)

    Field%values(:2,:2,1) = reshape([ &
      .false.,.true., &
      .true.,.false. &
    ], [2,2])

    Field%values(:2,:2,2) = reshape([ &
      .true.,.false., &
      .false.,.true. &
    ], [2,2])

    ExpectedValues1(:,:,1) = reshape([ &
      .false.,.true.,.false., &
      .true.,.false.,.true., &
      .false.,.true.,.false. &
    ], [3,3])

    ExpectedValues1(:,:,2) = reshape([ &
      .true.,.false.,.true., &
      .false.,.true.,.false., &
      .true.,.false.,.true. &
    ], [3,3])

    ExpectedValues1(:,:,3) = reshape([ &
      .false.,.true.,.false., &
      .true.,.false.,.true., &
      .false.,.true.,.false. &
    ], [3,3])

    call ovkFieldPeriodicFill(Field, PrincipalCart)

    @AssertTrue(all(ExpectedValues1 .eqv. Field%values))

    ! Extended fill
    ExtendedCart = ovk_cart_(3, [0,0,0], [3,3,3])
    Field = ovk_field_logical_(ExtendedCart)

    Field%values(1:2,1:2,1) = reshape([ &
      .false.,.true., &
      .true.,.false. &
    ], [2,2])

    Field%values(1:2,1:2,2) = reshape([ &
      .true.,.false., &
      .false.,.true. &
    ], [2,2])

    ExpectedValues2(:,:,0) = reshape([ &
      .true.,.false.,.true.,.false., &
      .false.,.true.,.false.,.true., &
      .true.,.false.,.true.,.false., &
      .false.,.true.,.false.,.true. &
    ], [4,4])

    ExpectedValues2(:,:,1) = reshape([ &
      .false.,.true.,.false.,.true., &
      .true.,.false.,.true.,.false., &
      .false.,.true.,.false.,.true., &
      .true.,.false.,.true.,.false. &
    ], [4,4])

    ExpectedValues2(:,:,2) = reshape([ &
      .true.,.false.,.true.,.false., &
      .false.,.true.,.false.,.true., &
      .true.,.false.,.true.,.false., &
      .false.,.true.,.false.,.true. &
    ], [4,4])

    ExpectedValues2(:,:,3) = reshape([ &
      .false.,.true.,.false.,.true., &
      .true.,.false.,.true.,.false., &
      .false.,.true.,.false.,.true., &
      .true.,.false.,.true.,.false. &
    ], [4,4])

    call ovkFieldPeriodicFill(Field, PrincipalCart)

    @AssertTrue(all(ExpectedValues2 .eqv. Field%values))

  end subroutine PeriodicFillLogical3D

  @Test
  subroutine PatchInteger2D(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: Cart
    type(ovk_field_int) :: Field
    integer, dimension(2,2) :: ExpectedValues
    integer, dimension(2,2) :: PatchValues

    Cart = ovk_cart_(2, [3,3], [.true.,.true.])

    Field = ovk_field_int_(Cart)

    Field%values(:,:,1) = reshape([ &
      1, 2, 3, &
      4, 5, 6, &
      7, 8, 9 &
    ], [3,3])

    ! Interior
    ExpectedValues = reshape([ &
      5, 6, &
      8, 9 &
    ], [2,2])

    call ovkGetFieldPatch(Field, [2,2], [3,3], PatchValues)

    @AssertTrue(all(ExpectedValues == PatchValues))

    ! Periodic boundary
    ExpectedValues = reshape([ &
      9, 7, &
      3, 1 &
    ], [2,2])

    ! Lower
    call ovkGetFieldPatch(Field, [0,0], [1,1], PatchValues)
    @AssertTrue(all(ExpectedValues == PatchValues))

    ! Upper
    call ovkGetFieldPatch(Field, [3,3], [4,4], PatchValues)
    @AssertTrue(all(ExpectedValues == PatchValues))

  end subroutine PatchInteger2D

  @Test
  subroutine PatchInteger3D(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: Cart
    type(ovk_field_int) :: Field
    integer, dimension(2,2,2) :: ExpectedValues
    integer, dimension(2,2,2) :: PatchValues

    Cart = ovk_cart_(3, [3,3,3], [.true.,.true.,.true.])

    Field = ovk_field_int_(Cart)

    Field%values(:,:,1) = reshape([ &
      1, 2, 3, &
      4, 5, 6, &
      7, 8, 9 &
    ], [3,3])

    Field%values(:,:,2) = reshape([ &
      10, 11, 12, &
      13, 14, 15, &
      16, 17, 18 &
    ], [3,3])

    Field%values(:,:,3) = reshape([ &
      19, 20, 21, &
      22, 23, 24, &
      25, 26, 27 &
    ], [3,3])

    ! Interior
    ExpectedValues(:,:,1) = reshape([ &
      14, 15, &
      17, 18 &
    ], [2,2])

    ExpectedValues(:,:,2) = reshape([ &
      23, 24, &
      26, 27 &
    ], [2,2])

    call ovkGetFieldPatch(Field, [2,2,2], [3,3,3], PatchValues)

    @AssertTrue(all(ExpectedValues == PatchValues))

    ! Periodic boundary
    ExpectedValues(:,:,1) = reshape([ &
      27, 25, &
      21, 19 &
    ], [2,2])

    ExpectedValues(:,:,2) = reshape([ &
      9, 7, &
      3, 1 &
    ], [2,2])

    ! Lower
    call ovkGetFieldPatch(Field, [0,0,0], [1,1,1], PatchValues)
    @AssertTrue(all(ExpectedValues == PatchValues))

    ! Upper
    call ovkGetFieldPatch(Field, [3,3,3], [4,4,4], PatchValues)
    @AssertTrue(all(ExpectedValues == PatchValues))

  end subroutine PatchInteger3D

  @Test
  subroutine PatchLargeInteger2D(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: Cart
    type(ovk_field_large_int) :: Field
    integer(lk), dimension(2,2) :: ExpectedValues
    integer(lk), dimension(2,2) :: PatchValues

    Cart = ovk_cart_(2, [3,3], [.true.,.true.])

    Field = ovk_field_large_int_(Cart)

    Field%values(:,:,1) = reshape([ &
      1_lk, 2_lk, 3_lk, &
      4_lk, 5_lk, 6_lk, &
      7_lk, 8_lk, 9_lk &
    ], [3,3])

    ! Interior
    ExpectedValues = reshape([ &
      5_lk, 6_lk, &
      8_lk, 9_lk &
    ], [2,2])

    call ovkGetFieldPatch(Field, [2,2], [3,3], PatchValues)

    @AssertTrue(all(ExpectedValues == PatchValues))

    ! Periodic boundary
    ExpectedValues = reshape([ &
      9_lk, 7_lk, &
      3_lk, 1_lk &
    ], [2,2])

    ! Lower
    call ovkGetFieldPatch(Field, [0,0], [1,1], PatchValues)
    @AssertTrue(all(ExpectedValues == PatchValues))

    ! Upper
    call ovkGetFieldPatch(Field, [3,3], [4,4], PatchValues)
    @AssertTrue(all(ExpectedValues == PatchValues))

  end subroutine PatchLargeInteger2D

  @Test
  subroutine PatchLargeInteger3D(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: Cart
    type(ovk_field_large_int) :: Field
    integer(lk), dimension(2,2,2) :: ExpectedValues
    integer(lk), dimension(2,2,2) :: PatchValues

    Cart = ovk_cart_(3, [3,3,3], [.true.,.true.,.true.])

    Field = ovk_field_large_int_(Cart)

    Field%values(:,:,1) = reshape([ &
      1_lk, 2_lk, 3_lk, &
      4_lk, 5_lk, 6_lk, &
      7_lk, 8_lk, 9_lk &
    ], [3,3])

    Field%values(:,:,2) = reshape([ &
      10_lk, 11_lk, 12_lk, &
      13_lk, 14_lk, 15_lk, &
      16_lk, 17_lk, 18_lk &
    ], [3,3])

    Field%values(:,:,3) = reshape([ &
      19_lk, 20_lk, 21_lk, &
      22_lk, 23_lk, 24_lk, &
      25_lk, 26_lk, 27_lk &
    ], [3,3])

    ! Interior
    ExpectedValues(:,:,1) = reshape([ &
      14_lk, 15_lk, &
      17_lk, 18_lk &
    ], [2,2])

    ExpectedValues(:,:,2) = reshape([ &
      23_lk, 24_lk, &
      26_lk, 27_lk &
    ], [2,2])

    call ovkGetFieldPatch(Field, [2,2,2], [3,3,3], PatchValues)

    @AssertTrue(all(ExpectedValues == PatchValues))

    ! Periodic boundary
    ExpectedValues(:,:,1) = reshape([ &
      27_lk, 25_lk, &
      21_lk, 19_lk &
    ], [2,2])

    ExpectedValues(:,:,2) = reshape([ &
      9_lk, 7_lk, &
      3_lk, 1_lk &
    ], [2,2])

    ! Lower
    call ovkGetFieldPatch(Field, [0,0,0], [1,1,1], PatchValues)
    @AssertTrue(all(ExpectedValues == PatchValues))

    ! Upper
    call ovkGetFieldPatch(Field, [3,3,3], [4,4,4], PatchValues)
    @AssertTrue(all(ExpectedValues == PatchValues))

  end subroutine PatchLargeInteger3D

  @Test
  subroutine PatchReal2D(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: Cart
    type(ovk_field_real) :: Field
    real(rk), dimension(2,2) :: ExpectedValues
    real(rk), dimension(2,2) :: PatchValues

    Cart = ovk_cart_(2, [3,3], [.true.,.true.])

    Field = ovk_field_real_(Cart)

    Field%values(:,:,1) = reshape([ &
      1._rk, 2._rk, 3._rk, &
      4._rk, 5._rk, 6._rk, &
      7._rk, 8._rk, 9._rk &
    ], [3,3])

    ! Interior
    ExpectedValues = reshape([ &
      5._rk, 6._rk, &
      8._rk, 9._rk &
    ], [2,2])

    call ovkGetFieldPatch(Field, [2,2], [3,3], PatchValues)

    @AssertTrue(all(ExpectedValues == PatchValues))

    ! Periodic boundary
    ExpectedValues = reshape([ &
      9._rk, 7._rk, &
      3._rk, 1._rk &
    ], [2,2])

    ! Lower
    call ovkGetFieldPatch(Field, [0,0], [1,1], PatchValues)
    @AssertTrue(all(ExpectedValues == PatchValues))

    ! Upper
    call ovkGetFieldPatch(Field, [3,3], [4,4], PatchValues)
    @AssertTrue(all(ExpectedValues == PatchValues))

  end subroutine PatchReal2D

  @Test
  subroutine PatchReal3D(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: Cart
    type(ovk_field_real) :: Field
    real(rk), dimension(2,2,2) :: ExpectedValues
    real(rk), dimension(2,2,2) :: PatchValues

    Cart = ovk_cart_(3, [3,3,3], [.true.,.true.,.true.])

    Field = ovk_field_real_(Cart)

    Field%values(:,:,1) = reshape([ &
      1._rk, 2._rk, 3._rk, &
      4._rk, 5._rk, 6._rk, &
      7._rk, 8._rk, 9._rk &
    ], [3,3])

    Field%values(:,:,2) = reshape([ &
      10._rk, 11._rk, 12._rk, &
      13._rk, 14._rk, 15._rk, &
      16._rk, 17._rk, 18._rk &
    ], [3,3])

    Field%values(:,:,3) = reshape([ &
      19._rk, 20._rk, 21._rk, &
      22._rk, 23._rk, 24._rk, &
      25._rk, 26._rk, 27._rk &
    ], [3,3])

    ! Interior
    ExpectedValues(:,:,1) = reshape([ &
      14._rk, 15._rk, &
      17._rk, 18._rk &
    ], [2,2])

    ExpectedValues(:,:,2) = reshape([ &
      23._rk, 24._rk, &
      26._rk, 27._rk &
    ], [2,2])

    call ovkGetFieldPatch(Field, [2,2,2], [3,3,3], PatchValues)

    @AssertTrue(all(ExpectedValues == PatchValues))

    ! Periodic boundary
    ExpectedValues(:,:,1) = reshape([ &
      27._rk, 25._rk, &
      21._rk, 19._rk &
    ], [2,2])

    ExpectedValues(:,:,2) = reshape([ &
      9._rk, 7._rk, &
      3._rk, 1._rk &
    ], [2,2])

    ! Lower
    call ovkGetFieldPatch(Field, [0,0,0], [1,1,1], PatchValues)
    @AssertTrue(all(ExpectedValues == PatchValues))

    ! Upper
    call ovkGetFieldPatch(Field, [3,3,3], [4,4,4], PatchValues)
    @AssertTrue(all(ExpectedValues == PatchValues))

  end subroutine PatchReal3D

  @Test
  subroutine PatchLogical2D(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: Cart
    type(ovk_field_logical) :: Field
    logical, dimension(2,2) :: ExpectedValues
    logical, dimension(2,2) :: PatchValues

    Cart = ovk_cart_(2, [3,3], [.true.,.true.])

    Field = ovk_field_logical_(Cart)

    Field%values(:,:,1) = reshape([ &
      .false., .true., .false., &
      .true., .false., .true., &
      .false., .true., .false. &
    ], [3,3])

    ! Interior
    ExpectedValues = reshape([ &
      .false., .true., &
      .true., .false. &
    ], [2,2])

    call ovkGetFieldPatch(Field, [2,2], [3,3], PatchValues)

    @AssertTrue(all(ExpectedValues .eqv. PatchValues))

    ! Periodic boundary
    ExpectedValues = reshape([ &
      .false., .false., &
      .false., .false. &
    ], [2,2])

    ! Lower
    call ovkGetFieldPatch(Field, [0,0], [1,1], PatchValues)
    @AssertTrue(all(ExpectedValues .eqv. PatchValues))

    ! Upper
    call ovkGetFieldPatch(Field, [3,3], [4,4], PatchValues)
    @AssertTrue(all(ExpectedValues .eqv. PatchValues))

  end subroutine PatchLogical2D

  @Test
  subroutine PatchLogical3D(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: Cart
    type(ovk_field_logical) :: Field
    logical, dimension(2,2,2) :: ExpectedValues
    logical, dimension(2,2,2) :: PatchValues

    Cart = ovk_cart_(3, [3,3,3], [.true.,.true.,.true.])

    Field = ovk_field_logical_(Cart)

    Field%values(:,:,1) = reshape([ &
      .false., .true., .false., &
      .true., .false., .true., &
      .false., .true., .false. &
    ], [3,3])

    Field%values(:,:,2) = reshape([ &
      .true., .false., .true., &
      .false., .true., .false., &
      .true., .false., .true. &
    ], [3,3])

    Field%values(:,:,3) = reshape([ &
      .false., .true., .false., &
      .true., .false., .true., &
      .false., .true., .false. &
    ], [3,3])

    ! Interior
    ExpectedValues(:,:,1) = reshape([ &
      .true., .false., &
      .false., .true. &
    ], [2,2])

    ExpectedValues(:,:,2) = reshape([ &
      .false., .true., &
      .true., .false. &
    ], [2,2])

    call ovkGetFieldPatch(Field, [2,2,2], [3,3,3], PatchValues)

    @AssertTrue(all(ExpectedValues .eqv. PatchValues))

    ! Periodic boundary
    ExpectedValues(:,:,1) = reshape([ &
      .false., .false., &
      .false., .false. &
    ], [2,2])

    ExpectedValues(:,:,2) = reshape([ &
      .false., .false., &
      .false., .false. &
    ], [2,2])

    ! Lower
    call ovkGetFieldPatch(Field, [0,0,0], [1,1,1], PatchValues)
    @AssertTrue(all(ExpectedValues .eqv. PatchValues))

    ! Upper
    call ovkGetFieldPatch(Field, [3,3,3], [4,4,4], PatchValues)
    @AssertTrue(all(ExpectedValues .eqv. PatchValues))

  end subroutine PatchLogical3D

  @Test
  subroutine PatchLogical1Byte2D(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: Cart
    type(ovk_field_logical) :: Field
    logical(bk), dimension(2,2) :: ExpectedValues
    logical(bk), dimension(2,2) :: PatchValues

    Cart = ovk_cart_(2, [3,3], [.true.,.true.])

    Field = ovk_field_logical_(Cart)

    Field%values(:,:,1) = reshape([ &
      .false., .true., .false., &
      .true., .false., .true., &
      .false., .true., .false. &
    ], [3,3])

    ! Interior
    ExpectedValues = reshape([ &
      .false., .true., &
      .true., .false. &
    ], [2,2])

    call ovkGetFieldPatch(Field, [2,2], [3,3], PatchValues)

    @AssertTrue(logical(all(ExpectedValues .eqv. PatchValues)))

    ! Periodic boundary
    ExpectedValues = reshape([ &
      .false., .false., &
      .false., .false. &
    ], [2,2])

    ! Lower
    call ovkGetFieldPatch(Field, [0,0], [1,1], PatchValues)
    @AssertTrue(logical(all(ExpectedValues .eqv. PatchValues)))

    ! Upper
    call ovkGetFieldPatch(Field, [3,3], [4,4], PatchValues)
    @AssertTrue(logical(all(ExpectedValues .eqv. PatchValues)))

  end subroutine PatchLogical1Byte2D

  @Test
  subroutine PatchLogical1Byte3D(this)

    class(t_field_test), intent(inout) :: this

    type(ovk_cart) :: Cart
    type(ovk_field_logical) :: Field
    logical(bk), dimension(2,2,2) :: ExpectedValues
    logical(bk), dimension(2,2,2) :: PatchValues

    Cart = ovk_cart_(3, [3,3,3], [.true.,.true.,.true.])

    Field = ovk_field_logical_(Cart)

    Field%values(:,:,1) = reshape([ &
      .false., .true., .false., &
      .true., .false., .true., &
      .false., .true., .false. &
    ], [3,3])

    Field%values(:,:,2) = reshape([ &
      .true., .false., .true., &
      .false., .true., .false., &
      .true., .false., .true. &
    ], [3,3])

    Field%values(:,:,3) = reshape([ &
      .false., .true., .false., &
      .true., .false., .true., &
      .false., .true., .false. &
    ], [3,3])

    ! Interior
    ExpectedValues(:,:,1) = reshape([ &
      .true., .false., &
      .false., .true. &
    ], [2,2])

    ExpectedValues(:,:,2) = reshape([ &
      .false., .true., &
      .true., .false. &
    ], [2,2])

    call ovkGetFieldPatch(Field, [2,2,2], [3,3,3], PatchValues)

    @AssertTrue(logical(all(ExpectedValues .eqv. PatchValues)))

    ! Periodic boundary
    ExpectedValues(:,:,1) = reshape([ &
      .false., .false., &
      .false., .false. &
    ], [2,2])

    ExpectedValues(:,:,2) = reshape([ &
      .false., .false., &
      .false., .false. &
    ], [2,2])

    ! Lower
    call ovkGetFieldPatch(Field, [0,0,0], [1,1,1], PatchValues)
    @AssertTrue(logical(all(ExpectedValues .eqv. PatchValues)))

    ! Upper
    call ovkGetFieldPatch(Field, [3,3,3], [4,4,4], PatchValues)
    @AssertTrue(logical(all(ExpectedValues .eqv. PatchValues)))

  end subroutine PatchLogical1Byte3D

end module FieldTest
