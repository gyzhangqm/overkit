! Copyright (c) 2017 Matthew J. Smith and Overkit contributors
! License: MIT (http://opensource.org/licenses/MIT)

@Test
subroutine ovkMaskTest_inner_edge_2d(this)

  use pFUnit_mod
  use Overkit
  use ovsGlobal
  implicit none

  class(TestCase), intent(inout) :: this

  type(ovk_cart) :: Cart
  type(ovk_field_logical) :: Mask
  type(ovk_field_logical) :: EdgeMask
  logical, dimension(5,5,1) :: ExpectedValuesNonPeriodic
  logical, dimension(4,5,1) :: ExpectedValuesXPeriodic
  logical, dimension(5,4,1) :: ExpectedValuesYPeriodic
  logical, dimension(4,4,1) :: ExpectedValuesXYPeriodic

  ! Non-periodic
  Cart = ovk_cart_(2, [5,5])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(3,3,1) = .false.

  call ovkFindMaskEdge(Mask, OVK_EDGE_TYPE_INNER, EdgeMask)

  @AssertTrue(Cart == EdgeMask%cart)

  ExpectedValuesNonPeriodic = .true.
  ExpectedValuesNonPeriodic(3,3,1) = .false.

  @AssertTrue(all(ExpectedValuesNonPeriodic .eqv. EdgeMask%values))

  ! Periodic in x
  Cart = ovk_cart_(2, [4,5], [.true.,.false.])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(3,3,1) = .false.

  call ovkFindMaskEdge(Mask, OVK_EDGE_TYPE_INNER, EdgeMask)

  @AssertTrue(Cart == EdgeMask%cart)

  ExpectedValuesXPeriodic = .true.
  ExpectedValuesXPeriodic(1,2:4,1) = .false.
  ExpectedValuesXPeriodic(3,3,1) = .false.

  @AssertTrue(all(ExpectedValuesXPeriodic .eqv. EdgeMask%values))

  ! Periodic in y
  Cart = ovk_cart_(2, [5,4], [.false.,.true.])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(3,3,1) = .false.

  call ovkFindMaskEdge(Mask, OVK_EDGE_TYPE_INNER, EdgeMask)

  @AssertTrue(Cart == EdgeMask%cart)

  ExpectedValuesYPeriodic = .true.
  ExpectedValuesYPeriodic(2:4,1,1) = .false.
  ExpectedValuesYPeriodic(3,3,1) = .false.

  @AssertTrue(all(ExpectedValuesYPeriodic .eqv. EdgeMask%values))

  ! Periodic in x and y
  Cart = ovk_cart_(2, [4,4], [.true.,.true.])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(3,3,1) = .false.

  call ovkFindMaskEdge(Mask, OVK_EDGE_TYPE_INNER, EdgeMask)

  @AssertTrue(Cart == EdgeMask%cart)

  ExpectedValuesXYPeriodic = .false.
  ExpectedValuesXYPeriodic(2:4,2:4,1) = .true.
  ExpectedValuesXYPeriodic(3,3,1) = .false.

  @AssertTrue(all(ExpectedValuesXYPeriodic .eqv. EdgeMask%values))

  ! Non-false boundary value
  Cart = ovk_cart_(2, [5,5])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(3,3,1) = .false.

  call ovkFindMaskEdge(Mask, OVK_EDGE_TYPE_INNER, EdgeMask, BoundaryValue=.true.)

  @AssertTrue(Cart == EdgeMask%cart)

  ExpectedValuesNonPeriodic = .false.
  ExpectedValuesNonPeriodic(2:4,2:4,1) = .true.
  ExpectedValuesNonPeriodic(3,3,1) = .false.

  @AssertTrue(all(ExpectedValuesNonPeriodic .eqv. EdgeMask%values))

end subroutine ovkMaskTest_inner_edge_2d

@Test
subroutine ovkMaskTest_inner_edge_3d(this)

  use pFUnit_mod
  use Overkit
  use ovsGlobal
  implicit none

  class(TestCase), intent(inout) :: this

  type(ovk_cart) :: Cart
  type(ovk_field_logical) :: Mask
  type(ovk_field_logical) :: EdgeMask
  logical, dimension(5,5,5) :: ExpectedValuesNonPeriodic
  logical, dimension(4,5,5) :: ExpectedValuesXPeriodic
  logical, dimension(5,4,5) :: ExpectedValuesYPeriodic
  logical, dimension(5,5,4) :: ExpectedValuesZPeriodic
  logical, dimension(4,4,4) :: ExpectedValuesXYZPeriodic

  ! Non-periodic
  Cart = ovk_cart_(3, [5,5,5])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(3,3,3) = .false.

  call ovkFindMaskEdge(Mask, OVK_EDGE_TYPE_INNER, EdgeMask)

  @AssertTrue(Cart == EdgeMask%cart)

  ExpectedValuesNonPeriodic = .true.
  ExpectedValuesNonPeriodic(3,3,3) = .false.

  @AssertTrue(all(ExpectedValuesNonPeriodic .eqv. EdgeMask%values))

  ! Periodic in x
  Cart = ovk_cart_(3, [4,5,5], [.true.,.false.,.false.])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(3,3,3) = .false.

  call ovkFindMaskEdge(Mask, OVK_EDGE_TYPE_INNER, EdgeMask)

  @AssertTrue(Cart == EdgeMask%cart)

  ExpectedValuesXPeriodic = .true.
  ExpectedValuesXPeriodic(1,2:4,2:4) = .false.
  ExpectedValuesXPeriodic(3,3,3) = .false.

  @AssertTrue(all(ExpectedValuesXPeriodic .eqv. EdgeMask%values))

  ! Periodic in y
  Cart = ovk_cart_(3, [5,4,5], [.false.,.true.,.false.])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(3,3,3) = .false.

  call ovkFindMaskEdge(Mask, OVK_EDGE_TYPE_INNER, EdgeMask)

  @AssertTrue(Cart == EdgeMask%cart)

  ExpectedValuesYPeriodic = .true.
  ExpectedValuesYPeriodic(2:4,1,2:4) = .false.
  ExpectedValuesYPeriodic(3,3,3) = .false.

  @AssertTrue(all(ExpectedValuesYPeriodic .eqv. EdgeMask%values))

  ! Periodic in z
  Cart = ovk_cart_(3, [5,5,4], [.false.,.false.,.true.])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(3,3,3) = .false.

  call ovkFindMaskEdge(Mask, OVK_EDGE_TYPE_INNER, EdgeMask)

  @AssertTrue(Cart == EdgeMask%cart)

  ExpectedValuesZPeriodic = .true.
  ExpectedValuesZPeriodic(2:4,2:4,1) = .false.
  ExpectedValuesZPeriodic(3,3,3) = .false.

  @AssertTrue(all(ExpectedValuesZPeriodic .eqv. EdgeMask%values))

  ! Periodic in x, y, and z
  Cart = ovk_cart_(3, [4,4,4], [.true.,.true.,.true.])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(3,3,3) = .false.

  call ovkFindMaskEdge(Mask, OVK_EDGE_TYPE_INNER, EdgeMask)

  @AssertTrue(Cart == EdgeMask%cart)

  ExpectedValuesXYZPeriodic = .false.
  ExpectedValuesXYZPeriodic(2:4,2:4,2:4) = .true.
  ExpectedValuesXYZPeriodic(3,3,3) = .false.

  @AssertTrue(all(ExpectedValuesXYZPeriodic .eqv. EdgeMask%values))

  ! Non-false boundary value
  Cart = ovk_cart_(3, [5,5,5])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(3,3,3) = .false.

  call ovkFindMaskEdge(Mask, OVK_EDGE_TYPE_INNER, EdgeMask, BoundaryValue=.true.)

  @AssertTrue(Cart == EdgeMask%cart)

  ExpectedValuesNonPeriodic = .false.
  ExpectedValuesNonPeriodic(2:4,2:4,2:4) = .true.
  ExpectedValuesNonPeriodic(3,3,3) = .false.

  @AssertTrue(all(ExpectedValuesNonPeriodic .eqv. EdgeMask%values))

end subroutine ovkMaskTest_inner_edge_3d

@Test
subroutine ovkMaskTest_outer_edge_2d(this)

  use pFUnit_mod
  use Overkit
  use ovsGlobal
  implicit none

  class(TestCase), intent(inout) :: this

  type(ovk_cart) :: Cart
  type(ovk_cart) :: EdgeCart
  type(ovk_field_logical) :: Mask
  type(ovk_field_logical) :: EdgeMask
  logical, dimension(0:4,0:4,1) :: ExpectedValuesNonPeriodic
  logical, dimension(2,0:4,1) :: ExpectedValuesXPeriodic
  logical, dimension(0:4,2,1) :: ExpectedValuesYPeriodic
  logical, dimension(2,2,1) :: ExpectedValuesXYPeriodic

  ! Non-periodic
  Cart = ovk_cart_(2, [3,3])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(2,2,1) = .false.

  call ovkFindMaskEdge(Mask, OVK_EDGE_TYPE_OUTER, EdgeMask)

  EdgeCart = ovk_cart_(2, [0,0], [4,4])

  @AssertTrue(EdgeCart == EdgeMask%cart)

  ExpectedValuesNonPeriodic = .true.
  ExpectedValuesNonPeriodic(1:3,1:3,1) = .false.
  ExpectedValuesNonPeriodic(2,2,1) = .true.

  @AssertTrue(all(ExpectedValuesNonPeriodic .eqv. EdgeMask%values))

  ! Periodic in x
  Cart = ovk_cart_(2, [2,3], [.true.,.false.])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(2,2,1) = .false.

  call ovkFindMaskEdge(Mask, OVK_EDGE_TYPE_OUTER, EdgeMask)

  EdgeCart = ovk_cart_(2, [1,0], [2,4], [.true.,.false.])

  @AssertTrue(EdgeCart == EdgeMask%cart)

  ExpectedValuesXPeriodic = .false.
  ExpectedValuesXPeriodic(:,0,1) = .true.
  ExpectedValuesXPeriodic(:,4,1) = .true.
  ExpectedValuesXPeriodic(2,2,1) = .true.

  @AssertTrue(all(ExpectedValuesXPeriodic .eqv. EdgeMask%values))

  ! Periodic in y
  Cart = ovk_cart_(2, [3,2], [.false.,.true.])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(2,2,1) = .false.

  call ovkFindMaskEdge(Mask, OVK_EDGE_TYPE_OUTER, EdgeMask)

  EdgeCart = ovk_cart_(2, [0,1], [4,2], [.false.,.true.])

  @AssertTrue(EdgeCart == EdgeMask%cart)

  ExpectedValuesYPeriodic = .false.
  ExpectedValuesYPeriodic(0,:,1) = .true.
  ExpectedValuesYPeriodic(4,:,1) = .true.
  ExpectedValuesYPeriodic(2,2,1) = .true.

  @AssertTrue(all(ExpectedValuesYPeriodic .eqv. EdgeMask%values))

  ! Periodic in x and y
  Cart = ovk_cart_(2, [2,2], [.true.,.true.])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(2,2,1) = .false.

  call ovkFindMaskEdge(Mask, OVK_EDGE_TYPE_OUTER, EdgeMask)

  EdgeCart = Cart

  @AssertTrue(EdgeCart == EdgeMask%cart)

  ExpectedValuesXYPeriodic = .false.
  ExpectedValuesXYPeriodic(2,2,1) = .true.

  @AssertTrue(all(ExpectedValuesXYPeriodic .eqv. EdgeMask%values))

  ! Non-false boundary value
  Cart = ovk_cart_(2, [3,3])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(2,2,1) = .false.

  call ovkFindMaskEdge(Mask, OVK_EDGE_TYPE_OUTER, EdgeMask, BoundaryValue=.true.)

  ExpectedValuesNonPeriodic = .false.
  ExpectedValuesNonPeriodic(2,2,1) = .true.

  @AssertTrue(all(ExpectedValuesNonPeriodic .eqv. EdgeMask%values))

end subroutine ovkMaskTest_outer_edge_2d

@Test
subroutine ovkMaskTest_outer_edge_3d(this)

  use pFUnit_mod
  use Overkit
  use ovsGlobal
  implicit none

  class(TestCase), intent(inout) :: this

  type(ovk_cart) :: Cart
  type(ovk_cart) :: EdgeCart
  type(ovk_field_logical) :: Mask
  type(ovk_field_logical) :: EdgeMask
  logical, dimension(0:4,0:4,0:4) :: ExpectedValuesNonPeriodic
  logical, dimension(2,0:4,0:4) :: ExpectedValuesXPeriodic
  logical, dimension(0:4,2,0:4) :: ExpectedValuesYPeriodic
  logical, dimension(0:4,0:4,2) :: ExpectedValuesZPeriodic
  logical, dimension(2,2,2) :: ExpectedValuesXYZPeriodic

  ! Non-periodic
  Cart = ovk_cart_(3, [3,3,3])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(2,2,2) = .false.

  call ovkFindMaskEdge(Mask, OVK_EDGE_TYPE_OUTER, EdgeMask)

  EdgeCart = ovk_cart_(3, [0,0,0], [4,4,4])

  @AssertTrue(EdgeCart == EdgeMask%cart)

  ExpectedValuesNonPeriodic = .true.
  ExpectedValuesNonPeriodic(1:3,1:3,1:3) = .false.
  ExpectedValuesNonPeriodic(2,2,2) = .true.

  @AssertTrue(all(ExpectedValuesNonPeriodic .eqv. EdgeMask%values))

  ! Periodic in x
  Cart = ovk_cart_(3, [2,3,3], [.true.,.false.,.false.])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(2,2,2) = .false.

  call ovkFindMaskEdge(Mask, OVK_EDGE_TYPE_OUTER, EdgeMask)

  EdgeCart = ovk_cart_(3, [1,0,0], [2,4,4], [.true.,.false.,.false.])

  @AssertTrue(EdgeCart == EdgeMask%cart)

  ExpectedValuesXPeriodic = .false.
  ExpectedValuesXPeriodic(:,0,:) = .true.
  ExpectedValuesXPeriodic(:,4,:) = .true.
  ExpectedValuesXPeriodic(:,:,0) = .true.
  ExpectedValuesXPeriodic(:,:,4) = .true.
  ExpectedValuesXPeriodic(2,2,2) = .true.

  @AssertTrue(all(ExpectedValuesXPeriodic .eqv. EdgeMask%values))

  ! Periodic in y
  Cart = ovk_cart_(3, [3,2,3], [.false.,.true.,.false.])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(2,2,2) = .false.

  call ovkFindMaskEdge(Mask, OVK_EDGE_TYPE_OUTER, EdgeMask)

  EdgeCart = ovk_cart_(3, [0,1,0], [4,2,4], [.false.,.true.,.false.])

  @AssertTrue(EdgeCart == EdgeMask%cart)

  ExpectedValuesYPeriodic = .false.
  ExpectedValuesYPeriodic(0,:,:) = .true.
  ExpectedValuesYPeriodic(4,:,:) = .true.
  ExpectedValuesYPeriodic(:,:,0) = .true.
  ExpectedValuesYPeriodic(:,:,4) = .true.
  ExpectedValuesYPeriodic(2,2,2) = .true.

  @AssertTrue(all(ExpectedValuesYPeriodic .eqv. EdgeMask%values))

  ! Periodic in z
  Cart = ovk_cart_(3, [3,3,2], [.false.,.false.,.true.])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(2,2,2) = .false.

  call ovkFindMaskEdge(Mask, OVK_EDGE_TYPE_OUTER, EdgeMask)

  EdgeCart = ovk_cart_(3, [0,0,1], [4,4,2], [.false.,.false.,.true.])

  @AssertTrue(EdgeCart == EdgeMask%cart)

  ExpectedValuesZPeriodic = .false.
  ExpectedValuesZPeriodic(0,:,:) = .true.
  ExpectedValuesZPeriodic(4,:,:) = .true.
  ExpectedValuesZPeriodic(:,0,:) = .true.
  ExpectedValuesZPeriodic(:,4,:) = .true.
  ExpectedValuesZPeriodic(2,2,2) = .true.

  @AssertTrue(all(ExpectedValuesZPeriodic .eqv. EdgeMask%values))

  ! Periodic in x, y, and z
  Cart = ovk_cart_(3, [2,2,2], [.true.,.true.,.true.])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(2,2,2) = .false.

  call ovkFindMaskEdge(Mask, OVK_EDGE_TYPE_OUTER, EdgeMask, BoundaryValue=.true.)

  EdgeCart = Cart

  @AssertTrue(EdgeCart == EdgeMask%cart)

  ExpectedValuesXYZPeriodic = .false.
  ExpectedValuesXYZPeriodic(2,2,2) = .true.

  @AssertTrue(all(ExpectedValuesXYZPeriodic .eqv. EdgeMask%values))

  ! Non-false boundary value
  Cart = ovk_cart_(3, [3,3,3])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(2,2,2) = .false.

  call ovkFindMaskEdge(Mask, OVK_EDGE_TYPE_OUTER, EdgeMask, BoundaryValue=.true.)

  ExpectedValuesNonPeriodic = .false.
  ExpectedValuesNonPeriodic(2,2,2) = .true.

  @AssertTrue(all(ExpectedValuesNonPeriodic .eqv. EdgeMask%values))

end subroutine ovkMaskTest_outer_edge_3d

@Test
subroutine ovkMaskTest_grow_2d(this)

  use pFUnit_mod
  use Overkit
  use ovsGlobal
  implicit none

  class(TestCase), intent(inout) :: this

  type(ovk_cart) :: Cart
  type(ovk_field_logical) :: Mask
  logical, dimension(8,8,1) :: ExpectedValues

  ExpectedValues = .true.
  ExpectedValues(4:5,4:5,1) = .false.

  ! Non-periodic
  Cart = ovk_cart_(2, [8,8])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(2:7,2:7,1) = .false.

  call ovkGrowMask(Mask, 2)

  @AssertTrue(all(ExpectedValues .eqv. Mask%values))

  ! Periodic in x
  Cart = ovk_cart_(2, [7,8], [.true.,.false.])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(2:,2:7,1) = .false.

  call ovkGrowMask(Mask, 2)

  @AssertTrue(all(ExpectedValues(:7,:,:) .eqv. Mask%values))

  ! Periodic in y
  Cart = ovk_cart_(2, [8,7], [.false.,.true.])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(2:7,2:,1) = .false.

  call ovkGrowMask(Mask, 2)

  @AssertTrue(all(ExpectedValues(:,:7,:) .eqv. Mask%values))

  ! Periodic in x and y
  Cart = ovk_cart_(2, [7,7], [.true.,.true.])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(2:,2:,1) = .false.

  call ovkGrowMask(Mask, 2)

  @AssertTrue(all(ExpectedValues(:7,:7,:) .eqv. Mask%values))

end subroutine ovkMaskTest_grow_2d

@Test
subroutine ovkMaskTest_grow_3d(this)

  use pFUnit_mod
  use Overkit
  use ovsGlobal
  implicit none

  class(TestCase), intent(inout) :: this

  type(ovk_cart) :: Cart
  type(ovk_field_logical) :: Mask
  logical, dimension(8,8,8) :: ExpectedValues

  ExpectedValues = .true.
  ExpectedValues(4:5,4:5,4:5) = .false.

  ! Non-periodic
  Cart = ovk_cart_(3, [8,8,8])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(2:7,2:7,2:7) = .false.

  call ovkGrowMask(Mask, 2)

  @AssertTrue(all(ExpectedValues .eqv. Mask%values))

  ! Periodic in x
  Cart = ovk_cart_(3, [7,8,8], [.true.,.false.,.false.])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(2:,2:7,2:7) = .false.

  call ovkGrowMask(Mask, 2)

  @AssertTrue(all(ExpectedValues(:7,:,:) .eqv. Mask%values))

  ! Periodic in y
  Cart = ovk_cart_(3, [8,7,8], [.false.,.true.,.false.])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(2:7,2:,2:7) = .false.

  call ovkGrowMask(Mask, 2)

  @AssertTrue(all(ExpectedValues(:,:7,:) .eqv. Mask%values))

  ! Periodic in z
  Cart = ovk_cart_(3, [8,8,7], [.false.,.false.,.true.])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(2:7,2:7,2:) = .false.

  call ovkGrowMask(Mask, 2)

  @AssertTrue(all(ExpectedValues(:,:,:7) .eqv. Mask%values))

  ! Periodic in x, y, and z
  Cart = ovk_cart_(3, [7,7,7], [.true.,.true.,.true.])
  Mask = ovk_field_logical_(Cart, .true.)
  Mask%values(2:,2:,2:) = .false.

  call ovkGrowMask(Mask, 2)

  @AssertTrue(all(ExpectedValues(:7,:7,:7) .eqv. Mask%values))

end subroutine ovkMaskTest_grow_3d
