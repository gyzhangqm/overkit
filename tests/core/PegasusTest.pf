! Copyright (c) 2017 Matthew J. Smith and Overkit contributors
! License: MIT (http://opensource.org/licenses/MIT)

@Test
subroutine ovkPegasusTest_default(this)

  use pFUnit_mod
  use Overkit
  use ovsGlobal
  implicit none

  class(TestCase), intent(inout) :: this

  type(ovk_pegasus) :: PegasusData

  PegasusData = ovk_pegasus_()

  @AssertEqual(0, PegasusData%ngrd)
  @AssertFalse(allocated(PegasusData%ieng))
  @AssertFalse(allocated(PegasusData%jeng))
  @AssertFalse(allocated(PegasusData%keng))
  @AssertEqual(0, PegasusData%ipall)
  @AssertEqual(0, PegasusData%igall)
  @AssertEqual(0, PegasusData%ipip)
  @AssertEqual(0, PegasusData%ipbp)
  @AssertFalse(allocated(PegasusData%iisptr))
  @AssertFalse(allocated(PegasusData%iieptr))
  @AssertFalse(allocated(PegasusData%ibpnts))
  @AssertFalse(allocated(PegasusData%iipnts))
  @AssertFalse(allocated(PegasusData%ibct))
  @AssertFalse(allocated(PegasusData%iit))
  @AssertFalse(allocated(PegasusData%jit))
  @AssertFalse(allocated(PegasusData%kit))
  @AssertFalse(allocated(PegasusData%dxit))
  @AssertFalse(allocated(PegasusData%dyit))
  @AssertFalse(allocated(PegasusData%dzit))
  @AssertFalse(allocated(PegasusData%ibt))
  @AssertFalse(allocated(PegasusData%jbt))
  @AssertFalse(allocated(PegasusData%kbt))
  @AssertFalse(allocated(PegasusData%nit))
  @AssertFalse(allocated(PegasusData%njt))
  @AssertFalse(allocated(PegasusData%nkt))
  @AssertFalse(allocated(PegasusData%coeffit))

end subroutine ovkPegasusTest_default

@Test
subroutine ovkPegasusTest_make_2d(this)

  use pFUnit_mod
  use Overkit
  use ovsGlobal
  implicit none

  class(TestCase), intent(inout) :: this

  type(ovk_cart), dimension(2) :: Carts
  integer :: i, j, l
  real(rk), dimension(2,6,6) :: XYZ1
  real(rk), dimension(2,5,5) :: XYZ2
  type(ovk_field_real), dimension(2) :: Coords1, Coords2
  type(ovk_grid), dimension(2) :: Grids
  type(ovk_interp), dimension(2) :: InterpData
  integer, dimension(2) :: FringeSize
  integer, dimension(2) :: InterpScheme
  type(ovk_pegasus) :: PegasusData
  integer, dimension(16) :: Expected_iit1, Expected_jit1, Expected_kit1
  integer, dimension(4) :: Expected_iit2, Expected_jit2, Expected_kit2
  integer, dimension(4) :: Expected_ibt1, Expected_jbt1, Expected_kbt1
  integer, dimension(16) :: Expected_ibt2, Expected_jbt2, Expected_kbt2

  Carts(1) = ovk_cart_(2, [6,6])
  Carts(2) = ovk_cart_(2, [5,5])

  do j = 1, 6
    do i = 1, 6
      XYZ1(:,i,j) = real([i,j]-1, kind=rk)
    end do
  end do

  do j = 1, 5
    do i = 1, 5
      XYZ2(:,i,j) = 0.5_rk + real([i,j]-1, kind=rk)
    end do
  end do

  do i = 1, 2
    Coords1(i) = ovk_field_real_(Carts(1), XYZ1(i,:,:))
    Coords2(i) = ovk_field_real_(Carts(2), XYZ2(i,:,:))
  end do

  call ovkMakeGrid(Grids(1), Carts(1), Coords1)
  Grids(1)%id = 1
  call ovkMakeGrid(Grids(2), Carts(2), Coords2)
  Grids(2)%id = 2

  FringeSize = 1
  InterpScheme = OVK_INTERP_LINEAR

  call ovkAssembleOverset(Grids, InterpData, FringeSize=FringeSize, InterpScheme=InterpScheme)
  call ovkMakePegasusData(Grids, InterpData, Carts, PegasusData)

  @AssertEqual(2, PegasusData%ngrd)

  @AssertTrue(allocated(PegasusData%ieng))
  @AssertTrue(allocated(PegasusData%jeng))
  @AssertTrue(allocated(PegasusData%keng))
  @AssertEqual(2, size(PegasusData%ieng))
  @AssertEqual(2, size(PegasusData%jeng))
  @AssertEqual(2, size(PegasusData%keng))
  @AssertEqual(6, PegasusData%ieng(1))
  @AssertEqual(6, PegasusData%jeng(1))
  @AssertEqual(1, PegasusData%keng(1))
  @AssertEqual(5, PegasusData%ieng(2))
  @AssertEqual(5, PegasusData%jeng(2))
  @AssertEqual(1, PegasusData%keng(2))

  @AssertEqual(20, PegasusData%ipall)
  @AssertEqual(36, PegasusData%igall)
  @AssertEqual(16, PegasusData%ipip)
  @AssertEqual(16, PegasusData%ipbp)

  @AssertTrue(allocated(PegasusData%iisptr))
  @AssertTrue(allocated(PegasusData%iieptr))
  @AssertEqual(2, size(PegasusData%iisptr))
  @AssertEqual(2, size(PegasusData%iieptr))
  @AssertEqual(1, PegasusData%iisptr(1))
  @AssertEqual(16, PegasusData%iieptr(1))
  @AssertEqual(17, PegasusData%iisptr(2))
  @AssertEqual(20, PegasusData%iieptr(2))

  @AssertTrue(allocated(PegasusData%ibpnts))
  @AssertEqual(2, size(PegasusData%ibpnts))
  @AssertEqual(4, PegasusData%ibpnts(1))
  @AssertEqual(16, PegasusData%ibpnts(2))

  @AssertTrue(allocated(PegasusData%iipnts))
  @AssertEqual(2, size(PegasusData%iipnts))
  @AssertEqual(16, PegasusData%iipnts(1))
  @AssertEqual(4, PegasusData%iipnts(2))

  @AssertTrue(allocated(PegasusData%ibct))
  @AssertEqual([16,2], shape(PegasusData%ibct))
  @AssertEqual([(i,i=17,20)], PegasusData%ibct(:4,1))
  @AssertEqual([(i,i=1,16)], PegasusData%ibct(:16,2))

  @AssertTrue(allocated(PegasusData%iit))
  @AssertTrue(allocated(PegasusData%jit))
  @AssertTrue(allocated(PegasusData%kit))
  @AssertEqual([16,2], shape(PegasusData%iit))
  @AssertEqual([16,2], shape(PegasusData%jit))
  @AssertEqual([16,2], shape(PegasusData%kit))

  l = 1
  do j = 1, 5
    do i = 1, 5
      if (InterpData(2)%valid_mask%values(i,j,1)) then
        Expected_iit1(l) = InterpData(2)%donor_cells(1)%values(i,j,1)
        Expected_jit1(l) = InterpData(2)%donor_cells(2)%values(i,j,1)
        Expected_kit1(l) = 1
        l = l + 1
      end if
    end do
  end do

  l = 1
  do j = 1, 6
    do i = 1, 6
      if (InterpData(1)%valid_mask%values(i,j,1)) then
        Expected_iit2(l) = InterpData(1)%donor_cells(1)%values(i,j,1)
        Expected_jit2(l) = InterpData(1)%donor_cells(2)%values(i,j,1)
        Expected_kit2(l) = 1
        l = l + 1
      end if
    end do
  end do
        
  @AssertEqual(Expected_iit1, PegasusData%iit(:,1))
  @AssertEqual(Expected_jit1, PegasusData%jit(:,1))
  @AssertEqual(Expected_kit1, PegasusData%kit(:,1))
  @AssertEqual(Expected_iit2, PegasusData%iit(:4,2))
  @AssertEqual(Expected_jit2, PegasusData%jit(:4,2))
  @AssertEqual(Expected_kit2, PegasusData%kit(:4,2))

  @AssertTrue(allocated(PegasusData%dxit))
  @AssertTrue(allocated(PegasusData%dyit))
  @AssertTrue(allocated(PegasusData%dzit))
  @AssertEqual([16,2], shape(PegasusData%dxit))
  @AssertEqual([16,2], shape(PegasusData%dyit))
  @AssertEqual([16,2], shape(PegasusData%dzit))
  @AssertEqual(0.5_rk, PegasusData%dxit(:,1), 1.e-10_rk)
  @AssertEqual(0.5_rk, PegasusData%dyit(:,1), 1.e-10_rk)
  @AssertEqual(0._rk, PegasusData%dzit(:,1), 1.e-10_rk)
  @AssertEqual(0.5_rk, PegasusData%dxit(:4,2), 1.e-10_rk)
  @AssertEqual(0.5_rk, PegasusData%dyit(:4,2), 1.e-10_rk)
  @AssertEqual(0._rk, PegasusData%dzit(:4,2), 1.e-10_rk)

  @AssertTrue(allocated(PegasusData%ibt))
  @AssertTrue(allocated(PegasusData%jbt))
  @AssertTrue(allocated(PegasusData%kbt))
  @AssertEqual([16,2], shape(PegasusData%ibt))
  @AssertEqual([16,2], shape(PegasusData%jbt))
  @AssertEqual([16,2], shape(PegasusData%kbt))

  l = 1
  do j = 1, 6
    do i = 1, 6
      if (InterpData(1)%valid_mask%values(i,j,1)) then
        Expected_ibt1(l) = i
        Expected_jbt1(l) = j
        Expected_kbt1(l) = 1
        l = l + 1
      end if
    end do
  end do

  l = 1
  do j = 1, 5
    do i = 1, 5
      if (InterpData(2)%valid_mask%values(i,j,1)) then
        Expected_ibt2(l) = i
        Expected_jbt2(l) = j
        Expected_kbt2(l) = 1
        l = l + 1
      end if
    end do
  end do

  @AssertEqual(Expected_ibt1, PegasusData%ibt(:4,1))
  @AssertEqual(Expected_jbt1, PegasusData%jbt(:4,1))
  @AssertEqual(Expected_kbt1, PegasusData%kbt(:4,1))
  @AssertEqual(Expected_ibt2, PegasusData%ibt(:,2))
  @AssertEqual(Expected_jbt2, PegasusData%jbt(:,2))
  @AssertEqual(Expected_kbt2, PegasusData%kbt(:,2))

  @AssertTrue(allocated(PegasusData%nit))
  @AssertTrue(allocated(PegasusData%njt))
  @AssertTrue(allocated(PegasusData%nkt))
  @AssertEqual([16,2], shape(PegasusData%nit))
  @AssertEqual([16,2], shape(PegasusData%njt))
  @AssertEqual([16,2], shape(PegasusData%nkt))

  @AssertEqual(2, PegasusData%nit(:,1))
  @AssertEqual(2, PegasusData%njt(:,1))
  @AssertEqual(1, PegasusData%nkt(:,1))
  @AssertEqual(2, PegasusData%nit(:4,2))
  @AssertEqual(2, PegasusData%njt(:4,2))
  @AssertEqual(1, PegasusData%nkt(:4,2))

  @AssertTrue(allocated(PegasusData%coeffit))
  @AssertEqual([16,2,3,2], shape(PegasusData%coeffit))
  @AssertEqual(0.5_rk, PegasusData%coeffit(:,:,:2,1), 1.e-10_rk)
  @AssertEqual(1._rk, PegasusData%coeffit(:,1,3,1), 1.e-10_rk)
  @AssertEqual(0._rk, PegasusData%coeffit(:,2,3,1), 1.e-10_rk)
  @AssertEqual(0.5_rk, PegasusData%coeffit(:4,:,:2,2), 1.e-10_rk)
  @AssertEqual(1._rk, PegasusData%coeffit(:4,1,3,2), 1.e-10_rk)
  @AssertEqual(0._rk, PegasusData%coeffit(:4,2,3,2), 1.e-10_rk)

end subroutine ovkPegasusTest_make_2d

@Test
subroutine ovkPegasusTest_make_3d(this)

  use pFUnit_mod
  use Overkit
  use ovsGlobal
  implicit none

  class(TestCase), intent(inout) :: this

  type(ovk_cart), dimension(2) :: Carts
  integer :: i, j, k, l
  real(rk), dimension(3,6,6,6) :: XYZ1
  real(rk), dimension(3,5,5,5) :: XYZ2
  type(ovk_field_real), dimension(3) :: Coords1, Coords2
  type(ovk_grid), dimension(2) :: Grids
  type(ovk_interp), dimension(2) :: InterpData
  integer, dimension(2) :: FringeSize
  integer, dimension(2) :: InterpScheme
  type(ovk_pegasus) :: PegasusData
  integer, dimension(98) :: Expected_iit1, Expected_jit1, Expected_kit1
  integer, dimension(8) :: Expected_iit2, Expected_jit2, Expected_kit2
  integer, dimension(8) :: Expected_ibt1, Expected_jbt1, Expected_kbt1
  integer, dimension(98) :: Expected_ibt2, Expected_jbt2, Expected_kbt2

  Carts(1) = ovk_cart_(3, [6,6,6])
  Carts(2) = ovk_cart_(3, [5,5,5])

  do k = 1, 6
    do j = 1, 6
      do i = 1, 6
        XYZ1(:,i,j,k) = real([i,j,k]-1, kind=rk)
      end do
    end do
  end do

  do k = 1, 5
    do j = 1, 5
      do i = 1, 5
        XYZ2(:,i,j,k) = 0.5_rk + real([i,j,k]-1, kind=rk)
      end do
    end do
  end do

  do i = 1, 3
    Coords1(i) = ovk_field_real_(Carts(1), XYZ1(i,:,:,:))
    Coords2(i) = ovk_field_real_(Carts(2), XYZ2(i,:,:,:))
  end do

  call ovkMakeGrid(Grids(1), Carts(1), Coords1)
  Grids(1)%id = 1
  call ovkMakeGrid(Grids(2), Carts(2), Coords2)
  Grids(2)%id = 2

  FringeSize = 1
  InterpScheme = OVK_INTERP_LINEAR

  call ovkAssembleOverset(Grids, InterpData, FringeSize=FringeSize, InterpScheme=InterpScheme)
  call ovkMakePegasusData(Grids, InterpData, Carts, PegasusData)

  @AssertEqual(2, PegasusData%ngrd)

  @AssertTrue(allocated(PegasusData%ieng))
  @AssertTrue(allocated(PegasusData%jeng))
  @AssertTrue(allocated(PegasusData%keng))
  @AssertEqual(2, size(PegasusData%ieng))
  @AssertEqual(2, size(PegasusData%jeng))
  @AssertEqual(2, size(PegasusData%keng))
  @AssertEqual(6, PegasusData%ieng(1))
  @AssertEqual(6, PegasusData%jeng(1))
  @AssertEqual(6, PegasusData%keng(1))
  @AssertEqual(5, PegasusData%ieng(2))
  @AssertEqual(5, PegasusData%jeng(2))
  @AssertEqual(5, PegasusData%keng(2))

  @AssertEqual(106, PegasusData%ipall)
  @AssertEqual(216, PegasusData%igall)
  @AssertEqual(98, PegasusData%ipip)
  @AssertEqual(98, PegasusData%ipbp)

  @AssertTrue(allocated(PegasusData%iisptr))
  @AssertTrue(allocated(PegasusData%iieptr))
  @AssertEqual(2, size(PegasusData%iisptr))
  @AssertEqual(2, size(PegasusData%iieptr))
  @AssertEqual(1, PegasusData%iisptr(1))
  @AssertEqual(98, PegasusData%iieptr(1))
  @AssertEqual(99, PegasusData%iisptr(2))
  @AssertEqual(106, PegasusData%iieptr(2))

  @AssertTrue(allocated(PegasusData%ibpnts))
  @AssertEqual(2, size(PegasusData%ibpnts))
  @AssertEqual(8, PegasusData%ibpnts(1))
  @AssertEqual(98, PegasusData%ibpnts(2))

  @AssertTrue(allocated(PegasusData%iipnts))
  @AssertEqual(2, size(PegasusData%iipnts))
  @AssertEqual(98, PegasusData%iipnts(1))
  @AssertEqual(8, PegasusData%iipnts(2))

  @AssertTrue(allocated(PegasusData%ibct))
  @AssertEqual([98,2], shape(PegasusData%ibct))
  @AssertEqual([(i,i=99,106)], PegasusData%ibct(:8,1))
  @AssertEqual([(i,i=1,98)], PegasusData%ibct(:98,2))

  @AssertTrue(allocated(PegasusData%iit))
  @AssertTrue(allocated(PegasusData%jit))
  @AssertTrue(allocated(PegasusData%kit))
  @AssertEqual([98,2], shape(PegasusData%iit))
  @AssertEqual([98,2], shape(PegasusData%jit))
  @AssertEqual([98,2], shape(PegasusData%kit))

  l = 1
  do k = 1, 5
    do j = 1, 5
      do i = 1, 5
        if (InterpData(2)%valid_mask%values(i,j,k)) then
          Expected_iit1(l) = InterpData(2)%donor_cells(1)%values(i,j,k)
          Expected_jit1(l) = InterpData(2)%donor_cells(2)%values(i,j,k)
          Expected_kit1(l) = InterpData(2)%donor_cells(3)%values(i,j,k)
          l = l + 1
        end if
      end do
    end do
  end do

  l = 1
  do k = 1, 6
    do j = 1, 6
      do i = 1, 6
        if (InterpData(1)%valid_mask%values(i,j,k)) then
          Expected_iit2(l) = InterpData(1)%donor_cells(1)%values(i,j,k)
          Expected_jit2(l) = InterpData(1)%donor_cells(2)%values(i,j,k)
          Expected_kit2(l) = InterpData(1)%donor_cells(3)%values(i,j,k)
          l = l + 1
        end if
      end do
    end do
  end do

  @AssertEqual(Expected_iit1, PegasusData%iit(:,1))
  @AssertEqual(Expected_jit1, PegasusData%jit(:,1))
  @AssertEqual(Expected_kit1, PegasusData%kit(:,1))
  @AssertEqual(Expected_iit2, PegasusData%iit(:8,2))
  @AssertEqual(Expected_jit2, PegasusData%jit(:8,2))
  @AssertEqual(Expected_kit2, PegasusData%kit(:8,2))

  @AssertTrue(allocated(PegasusData%dxit))
  @AssertTrue(allocated(PegasusData%dyit))
  @AssertTrue(allocated(PegasusData%dzit))
  @AssertEqual([98,2], shape(PegasusData%dxit))
  @AssertEqual([98,2], shape(PegasusData%dyit))
  @AssertEqual([98,2], shape(PegasusData%dzit))
  @AssertEqual(0.5_rk, PegasusData%dxit(:,1), 1.e-10_rk)
  @AssertEqual(0.5_rk, PegasusData%dyit(:,1), 1.e-10_rk)
  @AssertEqual(0.5_rk, PegasusData%dzit(:,1), 1.e-10_rk)
  @AssertEqual(0.5_rk, PegasusData%dxit(:8,2), 1.e-10_rk)
  @AssertEqual(0.5_rk, PegasusData%dyit(:8,2), 1.e-10_rk)
  @AssertEqual(0.5_rk, PegasusData%dzit(:8,2), 1.e-10_rk)

  @AssertTrue(allocated(PegasusData%ibt))
  @AssertTrue(allocated(PegasusData%jbt))
  @AssertTrue(allocated(PegasusData%kbt))
  @AssertEqual([98,2], shape(PegasusData%ibt))
  @AssertEqual([98,2], shape(PegasusData%jbt))
  @AssertEqual([98,2], shape(PegasusData%kbt))

  l = 1
  do k = 1, 6
    do j = 1, 6
      do i = 1, 6
        if (InterpData(1)%valid_mask%values(i,j,k)) then
          Expected_ibt1(l) = i
          Expected_jbt1(l) = j
          Expected_kbt1(l) = k
          l = l + 1
        end if
      end do
    end do
  end do

  l = 1
  do k = 1, 5
    do j = 1, 5
      do i = 1, 5
        if (InterpData(2)%valid_mask%values(i,j,k)) then
          Expected_ibt2(l) = i
          Expected_jbt2(l) = j
          Expected_kbt2(l) = k
          l = l + 1
        end if
      end do
    end do
  end do

  @AssertEqual(Expected_ibt1, PegasusData%ibt(:8,1))
  @AssertEqual(Expected_jbt1, PegasusData%jbt(:8,1))
  @AssertEqual(Expected_kbt1, PegasusData%kbt(:8,1))
  @AssertEqual(Expected_ibt2, PegasusData%ibt(:,2))
  @AssertEqual(Expected_jbt2, PegasusData%jbt(:,2))
  @AssertEqual(Expected_kbt2, PegasusData%kbt(:,2))

  @AssertTrue(allocated(PegasusData%nit))
  @AssertTrue(allocated(PegasusData%njt))
  @AssertTrue(allocated(PegasusData%nkt))
  @AssertEqual([98,2], shape(PegasusData%nit))
  @AssertEqual([98,2], shape(PegasusData%njt))
  @AssertEqual([98,2], shape(PegasusData%nkt))

  @AssertEqual(2, PegasusData%nit(:,1))
  @AssertEqual(2, PegasusData%njt(:,1))
  @AssertEqual(2, PegasusData%nkt(:,1))
  @AssertEqual(2, PegasusData%nit(:8,2))
  @AssertEqual(2, PegasusData%njt(:8,2))
  @AssertEqual(2, PegasusData%nkt(:8,2))

  @AssertTrue(allocated(PegasusData%coeffit))
  @AssertEqual([98,2,3,2], shape(PegasusData%coeffit))
  @AssertEqual(0.5_rk, PegasusData%coeffit(:,:,:,1), 1.e-10_rk)
  @AssertEqual(0.5_rk, PegasusData%coeffit(:8,:,:,2), 1.e-10_rk)

end subroutine ovkPegasusTest_make_3d

@Test
subroutine ovkPegasusTest_destroy(this)

  use pFUnit_mod
  use Overkit
  use ovsGlobal
  implicit none

  class(TestCase), intent(inout) :: this

  type(ovk_cart), dimension(2) :: Carts
  integer :: i, j
  real(rk), dimension(2,6,6) :: XYZ1
  real(rk), dimension(2,5,5) :: XYZ2
  type(ovk_field_real), dimension(2) :: Coords1, Coords2
  type(ovk_grid), dimension(2) :: Grids
  type(ovk_interp), dimension(2) :: InterpData
  integer, dimension(2) :: FringeSize
  integer, dimension(2) :: InterpScheme
  type(ovk_pegasus) :: PegasusData

  Carts(1) = ovk_cart_(2, [6,6])
  Carts(2) = ovk_cart_(2, [5,5])

  do j = 1, 6
    do i = 1, 6
      XYZ1(:,i,j) = real([i,j]-1, kind=rk)
    end do
  end do

  do j = 1, 5
    do i = 1, 5
      XYZ2(:,i,j) = 0.5_rk + real([i,j]-1, kind=rk)
    end do
  end do

  do i = 1, 2
    Coords1(i) = ovk_field_real_(Carts(1), XYZ1(i,:,:))
    Coords2(i) = ovk_field_real_(Carts(2), XYZ2(i,:,:))
  end do

  call ovkMakeGrid(Grids(1), Carts(1), Coords1)
  Grids(1)%id = 1
  call ovkMakeGrid(Grids(2), Carts(2), Coords2)
  Grids(2)%id = 2

  FringeSize = 1
  InterpScheme = OVK_INTERP_LINEAR

  call ovkAssembleOverset(Grids, InterpData, FringeSize=FringeSize, InterpScheme=InterpScheme)

  call ovkMakePegasusData(Grids, InterpData, Carts, PegasusData)

  call ovkDestroyPegasusData(PegasusData)

  @AssertFalse(allocated(PegasusData%ieng))
  @AssertFalse(allocated(PegasusData%jeng))
  @AssertFalse(allocated(PegasusData%keng))
  @AssertFalse(allocated(PegasusData%iisptr))
  @AssertFalse(allocated(PegasusData%iieptr))
  @AssertFalse(allocated(PegasusData%ibpnts))
  @AssertFalse(allocated(PegasusData%iipnts))
  @AssertFalse(allocated(PegasusData%ibct))
  @AssertFalse(allocated(PegasusData%iit))
  @AssertFalse(allocated(PegasusData%jit))
  @AssertFalse(allocated(PegasusData%kit))
  @AssertFalse(allocated(PegasusData%dxit))
  @AssertFalse(allocated(PegasusData%dyit))
  @AssertFalse(allocated(PegasusData%dzit))
  @AssertFalse(allocated(PegasusData%ibt))
  @AssertFalse(allocated(PegasusData%jbt))
  @AssertFalse(allocated(PegasusData%kbt))
  @AssertFalse(allocated(PegasusData%nit))
  @AssertFalse(allocated(PegasusData%njt))
  @AssertFalse(allocated(PegasusData%nkt))
  @AssertFalse(allocated(PegasusData%coeffit))

end subroutine ovkPegasusTest_destroy
