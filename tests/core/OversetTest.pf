! Copyright (c) 2017 Matthew J. Smith and Overkit contributors
! License: MIT (http://opensource.org/licenses/MIT)

@Test
subroutine ovkOversetTest_partition_receivers_2d(this)

  use pFUnit_mod
  use Overkit
  use ovsGlobal
  implicit none

  class(TestCase), intent(inout) :: this

  type(ovk_cart) :: Cart1, Cart2
  integer :: i, j
  real(rk), dimension(2,4,4) :: XYZ1, XYZ2
  type(ovk_field_real), dimension(2) :: Coords1, Coords2
  type(ovk_field_logical) :: BoundaryMask1
  type(ovk_grid) :: Grid1, Grid2
  type(ovk_donor_accel) :: DonorAccel
  type(ovk_donors), dimension(1) :: Donors
  type(ovk_field_logical) :: OuterReceiverMask, InnerReceiverMask
  logical, dimension(4,4,1) :: ExpectedValues

  Cart1 = ovk_cart_(2, [4,4])
  Cart2 = ovk_cart_(2, [4,4])

  do j = 1, 4
    do i = 1, 4
      XYZ1(:,i,j) = real([i,j]-1, kind=rk)
    end do
  end do

  do j = 1, 4
    do i = 1, 4
      XYZ2(:,i,j) = [1._rk, 0._rk] + real([i,j]-1, kind=rk)
    end do
  end do

  do i = 1, 2
    Coords1(i) = ovk_field_real_(Cart1, XYZ1(i,:,:))
    Coords2(i) = ovk_field_real_(Cart2, XYZ2(i,:,:))
  end do

  call ovkMakeGrid(Grid1, Cart1, Coords1)
  Grid1%id = 1
  call ovkMakeGrid(Grid2, Cart2, Coords2)
  Grid2%id = 2

  call ovkMakeDonors(Donors(1), Cart1)

  call ovkGenerateDonorAccel(Grid2, DonorAccel, OverlapTolerance=1.e-10_rk)
  call ovkFindDonors(Grid2, Grid1, DonorAccel, Donors(1))

  ! Without boundary mask
  call ovkPartitionReceivers(Grid1, Donors, OuterReceiverMask, InnerReceiverMask, 1)

  ExpectedValues = .true.
  ExpectedValues(1,:,1) = .false.
  ExpectedValues(2:3,2:3,1) = .false.

  @AssertTrue(all(ExpectedValues .eqv. OuterReceiverMask%values))

  ExpectedValues = .false.
  ExpectedValues(2:3,2:3,1) = .true.

  @AssertTrue(all(ExpectedValues .eqv. InnerReceiverMask%values))

  BoundaryMask1 = ovk_field_logical_(Cart1, .true.)
  BoundaryMask1%values(2:,2:3,1) = .false.

  call ovkDestroyGrid(Grid1)
  call ovkMakeGrid(Grid1, Cart1, Coords1, BoundaryMask=BoundaryMask1)
  Grid1%id = 1

  ! With boundary mask
  call ovkPartitionReceivers(Grid1, Donors, OuterReceiverMask, InnerReceiverMask, 1)

  ExpectedValues = .false.
  ExpectedValues(4,:,1) = .true.

  @AssertTrue(all(ExpectedValues .eqv. OuterReceiverMask%values))

  ExpectedValues = .false.
  ExpectedValues(2:3,:,1) = .true.

  @AssertTrue(all(ExpectedValues .eqv. InnerReceiverMask%values))

end subroutine ovkOversetTest_partition_receivers_2d

@Test
subroutine ovkOversetTest_partition_receivers_3d(this)

  use pFUnit_mod
  use Overkit
  use ovsGlobal
  implicit none

  class(TestCase), intent(inout) :: this

  type(ovk_cart) :: Cart1, Cart2
  integer :: i, j, k
  real(rk), dimension(3,4,4,4) :: XYZ1, XYZ2
  type(ovk_field_real), dimension(3) :: Coords1, Coords2
  type(ovk_field_logical) :: BoundaryMask1
  type(ovk_grid) :: Grid1, Grid2
  type(ovk_donor_accel) :: DonorAccel
  type(ovk_donors), dimension(1) :: Donors
  type(ovk_field_logical) :: OuterReceiverMask, InnerReceiverMask
  logical, dimension(4,4,4) :: ExpectedValues

  Cart1 = ovk_cart_(3, [4,4,4])
  Cart2 = ovk_cart_(3, [4,4,4])

  do k = 1, 4
    do j = 1, 4
      do i = 1, 4
        XYZ1(:,i,j,k) = real([i,j,k]-1, kind=rk)
      end do
    end do
  end do

  do k = 1, 4
    do j = 1, 4
      do i = 1, 4
        XYZ2(:,i,j,k) = [0.5_rk, 0._rk, 0._rk] + real([i,j,k]-1, kind=rk)
      end do
    end do
  end do

  do i = 1, 3
    Coords1(i) = ovk_field_real_(Cart1, XYZ1(i,:,:,:))
    Coords2(i) = ovk_field_real_(Cart2, XYZ2(i,:,:,:))
  end do

  call ovkMakeGrid(Grid1, Cart1, Coords1)
  Grid1%id = 1
  call ovkMakeGrid(Grid2, Cart2, Coords2)
  Grid2%id = 2

  call ovkGenerateDonorAccel(Grid2, DonorAccel, OverlapTolerance=1.e-10_rk)
  call ovkFindDonors(Grid2, Grid1, DonorAccel, Donors(1))

  ! Without boundary mask
  call ovkPartitionReceivers(Grid1, Donors, OuterReceiverMask, InnerReceiverMask, 1)

  ExpectedValues = .true.
  ExpectedValues(1,:,:) = .false.
  ExpectedValues(2:3,2:3,2:3) = .false.

  @AssertTrue(all(ExpectedValues .eqv. OuterReceiverMask%values))

  ExpectedValues = .false.
  ExpectedValues(2:3,2:3,2:3) = .true.

  @AssertTrue(all(ExpectedValues .eqv. InnerReceiverMask%values))

  BoundaryMask1 = ovk_field_logical_(Cart1, .true.)
  BoundaryMask1%values(2:,2:3,2:3) = .false.

  call ovkDestroyGrid(Grid1)
  call ovkMakeGrid(Grid1, Cart1, Coords1, BoundaryMask=BoundaryMask1)
  Grid1%id = 1

  ! With boundary mask
  call ovkPartitionReceivers(Grid1, Donors, OuterReceiverMask, InnerReceiverMask, 1)

  ExpectedValues = .false.
  ExpectedValues(4,:,:) = .true.

  @AssertTrue(all(ExpectedValues .eqv. OuterReceiverMask%values))

  ExpectedValues = .false.
  ExpectedValues(2:3,:,:) = .true.

  @AssertTrue(all(ExpectedValues .eqv. InnerReceiverMask%values))

end subroutine ovkOversetTest_partition_receivers_3d

@Test
subroutine ovkOversetTest_overlap_optimization_mask_2d(this)

  use pFUnit_mod
  use Overkit
  use ovsGlobal
  implicit none

  class(TestCase), intent(inout) :: this

  type(ovk_cart) :: Cart
  integer :: i, j
  real(rk), dimension(2,5,5) :: XYZ
  type(ovk_field_real), dimension(2) :: Coords
  type(ovk_field_logical) :: GridMask
  type(ovk_grid) :: Grid
  type(ovk_donors) :: Donors
  type(ovk_field_logical) :: OverlapOptimizationMask
  logical, dimension(5,5,1) :: ExpectedValues

  Cart = ovk_cart_(2, [5,5])

  do j = 1, 5
    do i = 1, 5
      XYZ(:,i,j) = real([i,j]-1, kind=rk)
    end do
  end do

  do i = 1, 2
    Coords(i) = ovk_field_real_(Cart, XYZ(i,:,:))
  end do

  GridMask = ovk_field_logical_(Cart, .true.)
  GridMask%values(1,1,1) = .false.

  call ovkMakeGrid(Grid, Cart, Coords, GridMask=GridMask)
  Grid%id = 1

  call ovkMakeDonors(Donors, Cart)
  Donors%valid_mask%values = .false.
  Donors%valid_mask%values(:4,:4,1) = .true.
  Donors%valid_mask%values(1,1,1) = .false.

  call ovkGenerateOverlapOptimizationMask(Grid, Donors, OverlapOptimizationMask)

  ExpectedValues = .false.
  ExpectedValues(:2,:2,1) = .true.
  ExpectedValues(1,1,1) = .false.

  @AssertTrue(all(ExpectedValues .eqv. OverlapOptimizationMask%values))

  call ovkGenerateOverlapOptimizationMask(Grid, Donors, OverlapOptimizationMask, FringeSize=1)

  ExpectedValues = .false.
  ExpectedValues(:3,:3,1) = .true.
  ExpectedValues(1,1,1) = .false.

  @AssertTrue(all(ExpectedValues .eqv. OverlapOptimizationMask%values))

end subroutine ovkOversetTest_overlap_optimization_mask_2d

@Test
subroutine ovkOversetTest_overlap_optimization_mask_3d(this)

  use pFUnit_mod
  use Overkit
  use ovsGlobal
  implicit none

  class(TestCase), intent(inout) :: this

  type(ovk_cart) :: Cart
  integer :: i, j, k
  real(rk), dimension(3,5,5,5) :: XYZ
  type(ovk_field_real), dimension(3) :: Coords
  type(ovk_field_logical) :: GridMask
  type(ovk_grid) :: Grid
  type(ovk_donors) :: Donors
  type(ovk_field_logical) :: OverlapOptimizationMask
  logical, dimension(5,5,5) :: ExpectedValues

  Cart = ovk_cart_(3, [5,5,5])

  do k = 1, 5
    do j = 1, 5
      do i = 1, 5
        XYZ(:,i,j,k) = real([i,j,k]-1, kind=rk)
      end do
    end do
  end do

  do i = 1, 3
    Coords(i) = ovk_field_real_(Cart, XYZ(i,:,:,:))
  end do

  GridMask = ovk_field_logical_(Cart, .true.)
  GridMask%values(1,1,1) = .false.

  call ovkMakeGrid(Grid, Cart, Coords, GridMask=GridMask)
  Grid%id = 1

  call ovkMakeDonors(Donors, Cart)
  Donors%valid_mask%values = .false.
  Donors%valid_mask%values(:4,:4,:4) = .true.
  Donors%valid_mask%values(1,1,1) = .false.

  call ovkGenerateOverlapOptimizationMask(Grid, Donors, OverlapOptimizationMask)

  ExpectedValues = .false.
  ExpectedValues(:2,:2,:2) = .true.
  ExpectedValues(1,1,1) = .false.

  @AssertTrue(all(ExpectedValues .eqv. OverlapOptimizationMask%values))

  call ovkGenerateOverlapOptimizationMask(Grid, Donors, OverlapOptimizationMask, FringeSize=1)

  ExpectedValues = .false.
  ExpectedValues(:3,:3,:3) = .true.
  ExpectedValues(1,1,1) = .false.

  @AssertTrue(all(ExpectedValues .eqv. OverlapOptimizationMask%values))

end subroutine ovkOversetTest_overlap_optimization_mask_3d
